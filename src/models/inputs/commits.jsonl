{"new_contents": ""}
{"new_contents": "\ufeff// Copyright 2009 - 2010 Sina Iravanian - <sina@sinairv.com>\n//\n// This source file(s) may be redistributed, altered and customized\n// by any means PROVIDING the authors name and all copyright\n// notices remain intact.\n// THIS SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED. USE IT AT YOUR OWN RISK. THE AUTHOR ACCEPTS NO\n// LIABILITY FOR ANY DATA DAMAGE/LOSS THAT THIS PRODUCT MAY CAUSE.\n//-----------------------------------------------------------------------\n\nusing System;\n"}
{"new_contents": "\ufeff"}
{"new_contents": "\ufeff[TestFixture]\n"}
{"new_contents": "\ufeffpublic string SceneName\n\n"}
{"new_contents": "\ufeffpublic IntPtr FindControlHandle(IntPtr windowsHandle, string controlName)\n"}
{"new_contents": "\ufeffpublic int ID { get; set; }"}
{"new_contents": "\ufefftry\n{\nawait _certifyClient.GetAppVersion();\nisAvailable = true;\n}\ncatch (Exception)\n{\nisAvailable = false;\n}\n\n"}
{"new_contents": "\nreturn this;\n"}
{"new_contents": "\ufeffprotected override JsonContract CreateContract(Type objectType)"}
{"new_contents": "var updates = new List<UpdateInfo>();\nvar failures = new List<string>();\n"}
{"new_contents": "\ufeffstatic void Main(string[] args)\n"}
{"new_contents": "\ufeffpublic Static2DMap(int width, int height, double horizontalAngle, double verticalAngle, ushort maxDepth, ushort hostHeight){"}
{"new_contents": "\ufeffpublic void AddMarker(int id, Point topLeft, Point topRight, Point bottomLeft, Point bottomRight, int width, int depth, double yAngle){"}
{"new_contents": "\ufeff public void PlaceIndicator(string markerName, double startX, double startY, double size, float rotationAngle){\n"}
{"new_contents": "\ufeffpublic void PositionLabel(int labelId, double xCoord, double yCoord, double width, double height, bool isVisible){\n    "}
{"new_contents": "\ufeffprivate struct DepthData\n{\npublic DepthData(ushort depth, bool isObstacle)\n{\nDepth = depth;\nIsObstacle = isObstacle;\n}\n\npublic ushort Depth { get; }\npublic bool IsObstacle { get; }\n}"}
{"new_contents": "\ufeffprivate NetworkCredential getNewNetworkCredential()\n{\nreturn new NetworkCredential(ftp_username, ftp_password);\n}"}
{"new_contents": "// --------------------------------------------------------------------------------------------\n#region // Copyright (c) 2015, SIL International. All Rights Reserved.\n// <copyright from='2011' to='2015' company='SIL International'>\n//\t\tCopyright (c) 2015, SIL International. All Rights Reserved.\n//\n//\t\tDistributable under the terms of the MIT License (http://sil.mit-license.org/)\n// </copyright>\n#endregion\n// --------------------------------------------------------------------------------------------\nusing System;\nusing System.ComponentModel;\nusing System.Diagnostics;\nusing System.Drawing;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing System.Windows.Forms;\nusing HearThis.Communication;\nusing HearThis.Properties;\nusing HearThis.Publishing;\nusing HearThis.Script;\nusing L10NSharp;\nusing NetSparkle;\nusing SIL.IO;\nusing SIL.Windows.Forms.Miscellaneous;\nusing SIL.Windows.Forms.ReleaseNotes;\nusing Paratext;\nusing SIL.DblBundle.Text;\nusing SIL.Extensions;\nusing SIL.Reporting;\n\nnamespace HearThis.UI\n{\npublic partial class Shell : Form\n{\npublic static Sparkle UpdateChecker;\npublic event EventHandler OnProjectChanged;\nprivate string _projectNameToShow = string.Empty;\nprivate string _originalActorText;\nprivate Font _originalActorFont;\nprivate bool _mouseInMultiVoicePanel;\n\n\n#if MULTIPLEMODES\nprivate List<string> allowableModes;\n\nprivate const string kAdministrative = \"Administrator\";\n#endif\nprivate const string kNormalRecording = \"NormalRecording\";\n\npublic Shell()\n{\nInitializeComponent();\nText = Program.kProduct;\n\n_settingsProtectionHelper.ManageComponent(_settingsItem);\n_settingsProtectionHelper.ManageComponent(toolStripButtonChooseProject);\nSetupUILanguageMenu();\n\n_toolStrip.Renderer = new RecordingToolControl.NoBorderToolStripRenderer();\n_moreMenu.ForeColor = AppPallette.NavigationTextColor;\n\nInitializeModesCombo();\n\n// Todo: possibly make this conditional on an a device being connected.\n// If possible notice and show it when a device is later connected.\n// Or: possibly if no device is active it displays instructions.\n_syncWithAndroidItem.Visible = true;\n_originalActorFont = _actorLabel.Font;\n_originalActorText = _actorLabel.Text;\n_toolStrip.Renderer = new ToolStripColorArrowRenderer();\n_multiVoicePanel.MouseLeave += MultiVoicePanelOnMouseTransition;\n_multiVoicePanel.MouseEnter += MultiVoicePanelOnMouseTransition;\nforeach (Control c in _multiVoicePanel.Controls)\n{\nc.MouseEnter += MultiVoicePanelOnMouseTransition;\nc.MouseLeave += MultiVoicePanelOnMouseTransition;\n}\n_multiVoicePanel.Paint += (sender, e) =>\n{\nif (_mouseInMultiVoicePanel && !Controls.OfType<ActorCharacterChooser>().Any())\n{\nvar borderRect = _multiVoicePanel.ClientRectangle;\n// The numbers here were determined to line things up with controls below\nborderRect = new Rectangle(borderRect.Left + 18, borderRect.Top, borderRect.Width - 43, borderRect.Height);\nControlPaint.DrawBorder(e.Graphics, borderRect, AppPallette.FaintScriptFocusTextColor,\nButtonBorderStyle.Solid);\n}\n};\n_multiVoicePanel.Click += _actorCharacterButton_Click;\n}\n\n/// <summary>\n/// Unfortunately the mouse 'leaves' the multivoice panel when it enters a child control as well as when it really\n/// leaves the whole panel. So this routine is hooked to happen whenever it leaves or enters any of them.\n/// It figures out whether the mouse is really inside the panel and adjusts the border if this has changed.\n/// </summary>\n/// <param name=\"sender1\"></param>\n/// <param name=\"eventArgs\"></param>\nprivate void MultiVoicePanelOnMouseTransition(object sender1, EventArgs eventArgs)\n{\nbool isMouseInMVP = _multiVoicePanel.ClientRectangle.Contains(_multiVoicePanel.PointToClient(Control.MousePosition));\nif (isMouseInMVP != _mouseInMultiVoicePanel)\n{\n_mouseInMultiVoicePanel = isMouseInMVP;\n_multiVoicePanel.Invalidate();\n}\n}\n\npublic Project Project { get; private set; }\n\nprivate void OnChooseProject(object sender, EventArgs e)\n{\nChooseProject();\n}\n\nprivate bool ChooseProject()\n{\nusing (var dlg = new ChooseProject())\n{\nif (DialogResult.OK == dlg.ShowDialog())\n{\n// ENHANCE: Someday it might be nice to save/restore these in a project file so they could be remembered on\n// a per-project basis, but the VAST majority of our users are going to be working on a single project, so\n// this might be good enough.\nSettings.Default.Book = -1;\nSettings.Default.Chapter = -1;\nSettings.Default.Block = -1;\nLoadProject(dlg.SelectedProject);\nreturn true;\n}\nreturn false;\n}\n}\n\nprotected override void OnLoad(EventArgs e)\n{\nbase.OnLoad(e);\nbool loaded = false;\nif (!string.IsNullOrEmpty(Settings.Default.Project))\n{\nloaded = LoadProject(Settings.Default.Project);\n}\n\nif (!loaded) //if never did have a project, or that project couldn't be loaded\n{\nif (!ChooseProject())\n{\nClose();\nreturn;\n}\n}\n\nvar savedBounds = Settings.Default.RestoreBounds;\nif ((savedBounds.Width > MinimumSize.Width) && (savedBounds.Height > MinimumSize.Height) && (IsOnScreen(savedBounds)))\n{\nStartPosition = FormStartPosition.Manual;\nWindowState = FormWindowState.Normal;\nBounds = savedBounds;\n}\nelse\n{\nStartPosition = FormStartPosition.CenterScreen;\nWindowState = FormWindowState.Maximized;\n}\n\nUpdateChecker = new Sparkle(@\"http://build.palaso.org/guestAuth/repository/download/HearThis_HearThisWinDevPublishPt8/.lastSuccessful/appcast.xml\",\nIcon);\n// We don't want to do this until the main window is loaded because a) it's very easy for the user to overlook, and b)\n// more importantly, when the toast notifier closes, it can sometimes clobber an error message being displayed for the user.\nUpdateChecker.CheckOnFirstApplicationIdle();\n}\n\n/// <summary>\n/// Is a significant (100 x 100) portion of the form on-screen?\n/// </summary>\n/// <returns></returns>\nprivate static bool IsOnScreen(Rectangle rect)\n{\nvar screens = Screen.AllScreens;\nvar formTopLeft = new Rectangle(rect.Left, rect.Top, 100, 100);\n\nreturn screens.Any(screen => screen.WorkingArea.Contains(formTopLeft));\n}\n\nprivate void SetupUILanguageMenu()\n{\n_uiLanguageMenu.DropDownItems.Clear();\nforeach (var lang in LocalizationManager.GetUILanguages(true))\n{\nvar item = _uiLanguageMenu.DropDownItems.Add(lang.NativeName);\nitem.Tag = lang;\nitem.Click += ((a, b) =>\n{\nLocalizationManager.SetUILanguage(((CultureInfo) item.Tag).IetfLanguageTag, true);\nSettings.Default.UserInterfaceLanguage = ((CultureInfo) item.Tag).IetfLanguageTag;\nitem.Select();\n_uiLanguageMenu.Text = ((CultureInfo) item.Tag).NativeName;\n});\nif (((CultureInfo) item.Tag).IetfLanguageTag == Settings.Default.UserInterfaceLanguage)\n{\n_uiLanguageMenu.Text = ((CultureInfo) item.Tag).NativeName;\n}\n}\n\n_uiLanguageMenu.DropDownItems.Add(new ToolStripSeparator());\nvar menu = _uiLanguageMenu.DropDownItems.Add(LocalizationManager.GetString(\"MainWindow.MoreMenuItem\",\n\"More...\", \"Last item in menu of UI languages\"));\nmenu.Click += ((a, b) =>\n{\nProgram.LocalizationManager.ShowLocalizationDialogBox(false);\nSetupUILanguageMenu();\n});\n}\n\nprivate void InitializeModesCombo()\n{\n_btnMode.DropDownItems.Clear();\n#if MULTIPLEMODES\nallowableModes = new List<string>();\nif (Settings.Default.AllowAdministrativeMode)\n{\nToolStripItem item = _btnMode.DropDownItems.Add(LocalizationManager.GetString(\"MainWindow.Modes.Administrator\",\n\"Administrator\"));\nitem.Tag = kAdministrative;\nif (Settings.Default.ActiveMode == kAdministrative)\nSetMode(item);\n}\nif (Settings.Default.AllowNormalRecordingMode)\n{\nToolStripItem item = _btnMode.DropDownItems.Add(LocalizationManager.GetString(\"MainWindow.Modes.NormalRecording\",\n\"Normal Recording\"));\nitem.Tag = kNormalRecording;\nif (Settings.Default.ActiveMode == kNormalRecording)\nSetMode(item);\n}\n#endif\n_btnMode.Visible = (_btnMode.DropDownItems.Count > 1);\n_recordingToolControl1.HidingSkippedBlocks = Settings.Default.ActiveMode == kNormalRecording;\n}\n\n#if MULTIPLEMODES\nprivate void SetMode(ToolStripItem selectedMode)\n{\n_btnMode.Text = selectedMode.Text;\n\nswitch ((string)selectedMode.Tag)\n{\ncase kAdministrative:\n_recordingToolControl1.HidingSkippedBlocks = false;\nbreak;\ncase kNormalRecording:\n_recordingToolControl1.HidingSkippedBlocks = true;\nbreak;\n}\nSetWindowText();\n}\n#endif\n\nprivate void OnSaveClick(object sender, EventArgs e)\n{\nMessageBox.Show(\nLocalizationManager.GetString(\"MainWindow.SaveAutomatically\",\n\"HearThis automatically saves your work, while you use it. This button is just here to tell you that :-)  To create sound files for playing your recordings, click the Publish button.\"),\nLocalizationManager.GetString(\"Common.Save\", \"Save\"));\n}\n\nprivate void OnPublishClick(object sender, EventArgs e)\n{\nusing (var dlg = new PublishDialog(Project))\n{\ndlg.ShowDialog();\n}\n}\n\nprivate void OnSettingsButtonClicked(object sender, EventArgs e)\n{\nvar origBreakQuotesIntoBlocksValue = Settings.Default.BreakQuotesIntoBlocks;\nvar origAdditionalBlockBreakChars = Settings.Default.AdditionalBlockBreakCharacters;\nvar origBreakAtParagraphBreaks = Project?.ProjectSettings?.BreakAtParagraphBreaks;\nDialogResult result = _settingsProtectionHelper.LaunchSettingsIfAppropriate(() =>\n{\nusing (var dlg = new AdministrativeSettings(Project))\n{\nreturn dlg.ShowDialog(FindForm());\n}\n});\nif (result == DialogResult.OK)\n{\nif (origBreakQuotesIntoBlocksValue != Settings.Default.BreakQuotesIntoBlocks ||\norigAdditionalBlockBreakChars != Settings.Default.AdditionalBlockBreakCharacters ||\norigBreakAtParagraphBreaks != Project?.ProjectSettings?.BreakAtParagraphBreaks)\n{\nLoadProject(Settings.Default.Project);\n}\nelse\n{\nScriptControl.ScriptBlockPainter.SetClauseSeparators();\n#if MULTIPLEMODES\nInvoke(new Action(InitializeModesCombo));\n#else\nInvoke(new Action(() =>\n{\n_recordingToolControl1.HidingSkippedBlocks = Settings.Default.ActiveMode == kNormalRecording;\n}));\n#endif\n}\n}\n}\n\nprivate void OnAboutClick(object sender, EventArgs e)\n{\nusing (var dlg = new SILAboutBox(FileLocator.GetFileDistributedWithApplication(\"aboutbox.htm\")))\n{\ndlg.CheckForUpdatesClicked += HandleAboutDialogCheckForUpdatesClick;\ndlg.ReleaseNotesClicked += HandleAboutDialogReleaseNotesClicked;\ndlg.ShowDialog();\n}\n}\n\nprivate void HandleAboutDialogReleaseNotesClicked(object sender, EventArgs e)\n{\nvar path = FileLocator.GetFileDistributedWithApplication(\"ReleaseNotes.md\");\nusing (var dlg = new ShowReleaseNotesDialog(((Form)sender).Icon, path))\ndlg.ShowDialog();\n}\n\nprivate void HandleAboutDialogCheckForUpdatesClick(object sender, EventArgs e)\n{\nvar updateStatus = UpdateChecker.CheckForUpdatesAtUserRequest();\nif (updateStatus == Sparkle.UpdateStatus.UpdateNotAvailable)\n((SILAboutBox)sender).NotifyNoUpdatesAvailable();\n}\n\nprotected override void OnClosing(CancelEventArgs e)\n{\nbase.OnClosing(e);\nSettings.Default.Save();\n}\n\nprotected override void OnActivated(EventArgs e)\n{\nbase.OnActivated(e);\n_recordingToolControl1.StartFilteringMessages();\n}\n\nprotected override void OnDeactivate(EventArgs e)\n{\nbase.OnDeactivate(e);\n_recordingToolControl1.StopFilteringMessages();\n}\n\nprivate bool LoadProject(string name)\n{\ntry\n{\n_projectNameToShow = name;\nScriptProviderBase scriptProvider;\nif (name == SampleScriptProvider.kProjectUiName)\nscriptProvider = new SampleScriptProvider();\nelse if (Path.GetExtension(name) == MultiVoiceScriptProvider.MultiVoiceFileExtension)\n{\nif (Settings.Default.Project != name)\n{\n// Forget any actor and character we remembered from another project.\nSettings.Default.Actor = Settings.Default.Character = null;\n}\nvar mvScriptProvider = MultiVoiceScriptProvider.Load(name);\nscriptProvider = mvScriptProvider;\nmvScriptProvider.RestrictToCharacter(Settings.Default.Actor, Settings.Default.Character);\n_multiVoicePanel.Visible = true;\n// This combination puts the two top-docked controls and the fill-docked _recordingToolControl into the right\n// sequence in the Controls list so that the top two are in the right order and the recording tool occupies\n// the rest of the space.\n// I can't find ANY order I can set in the designer which does this properly, possibly because when layout is\n// first done the multi voice panel is hidden. Another thing that might work is to put them in the right order\n// in the designer and force a layout after making the multi-voice control visible. I haven't tried that.\n// If you experiment with changing this watch out for the top controls being in the wrong order and also\n// for the recording tool being partly hidden behind one or both of them. The latter is easy to miss because\n// there is quite a bit of unused space at the top of the recording control.\n_multiVoicePanel.BringToFront();\n_recordingToolControl1.BringToFront();\nUpdateActorCharacter(mvScriptProvider, true);\n}\nelse if (Path.GetExtension(name) == ExistingProjectsList.kProjectFileExtension ||\nPath.GetExtension(name) == \".zip\")\n{\nTextBundle<DblTextMetadata<DblMetadataLanguage>, DblMetadataLanguage> bundle;\ntry\n{\nbundle = new TextBundle<DblTextMetadata<DblMetadataLanguage>, DblMetadataLanguage>(name);\n}\ncatch (Exception e)\n{\nErrorReport.NotifyUserOfProblem(e,\nLocalizationManager.GetString(\"MainWindow.ProjectMetadataInvalid\", \"Project could not be loaded: {0}\"), name);\nreturn false;\n}\nvar metadata = bundle.Metadata;\n\nvar hearThisProjectFolder = Path.Combine(Program.ApplicationDataBaseFolder, metadata.Language.Iso + \"_\" + metadata.Name);\n\nif (Path.GetExtension(name) == \".zip\" || Path.GetDirectoryName(name) != hearThisProjectFolder)\n{\nvar projectFile = Path.Combine(hearThisProjectFolder, Path.ChangeExtension(Path.GetFileName(name), ExistingProjectsList.kProjectFileExtension));\nif (Directory.Exists(hearThisProjectFolder))\n{\nif (File.Exists(projectFile))\n{\n//TODO: Deal with collision. Offer to open existing project. Overwrite using this bundle?\nreturn false;\n}\n}\nelse\nDirectory.CreateDirectory(hearThisProjectFolder);\nFile.Copy(name, projectFile);\nname = projectFile;\nbundle = new TextBundle<DblTextMetadata<DblMetadataLanguage>, DblMetadataLanguage>(name);\n}\nscriptProvider = new ParatextScriptProvider(new TextBundleScripture(bundle));\n_projectNameToShow = metadata.Name;\n}\nelse\n{\nScrText paratextProject = ScrTextCollection.Get(name);\nif (paratextProject == null)\nreturn false;\n_projectNameToShow = paratextProject.JoinedNameAndFullName;\nscriptProvider = new ParatextScriptProvider(new ParatextScripture(paratextProject));\n}\nif (!(scriptProvider is IActorCharacterProvider))\n{\n// Also can't seem to get this right in designer, with the invisible actor chooser panel confusing things.\n_recordingToolControl1.BringToFront();\n}\n\nProject = new Project(scriptProvider);\nif (Project.ActorCharacterProvider == null)\n{\n_multiVoicePanel.Hide(); // in case shown by a previously open project.\n}\nif (OnProjectChanged != null)\nOnProjectChanged(this, new EventArgs());\nSetWindowText();\n\nSettings.Default.Project = name;\nSettings.Default.Save();\n_recordingToolControl1.AdjustMinimumSize();\n// We can shrink as much as the recording tool can.\nMinimumSize = new Size(MinimumSize.Width, Height - (_recordingToolControl1.Height - _recordingToolControl1.MinimumSize.Height));\nreturn true;\n}\ncatch (Exception e)\n{\nErrorReport.NotifyUserOfProblem(e, \"Could not open \" + name);\n}\nreturn false; //didn't load it\n}\n\nprivate void SetWindowText()\n{\nvar ver = Assembly.GetExecutingAssembly().GetName().Version;\n#if MULTIPLEMODES\nText =\nstring.Format(\nLocalizationManager.GetString(\"MainWindow.WindowTitle\", \"{3} -- HearThis {0}.{1}.{2} ({4})\",\n\"{3} is project name, {0}.{1}.{2} are parts of version number. {4} is the active mode (i.e., view)\"),\nver.Major, ver.Minor, ver.Build, _projectNameToShow, _btnMode.Text);\n#else\nText =\nstring.Format(\nLocalizationManager.GetString(\"MainWindow.WindowTitle\", \"{3} -- {4} {0}.{1}.{2}\",\n\"{4} is product name: HearThis; {3} is project name, {0}.{1}.{2} are parts of version number.\"),\nver.Major, ver.Minor, ver.Build, _projectNameToShow, Program.kProduct);\n#endif\n}\n\nprivate void ModeDropDownItemClicked(object sender, ToolStripItemClickedEventArgs e)\n{\n#if MULTIPLEMODES\nif (Settings.Default.ActiveMode != (string) e.ClickedItem.Tag)\n{\nSettings.Default.ActiveMode = (string) e.ClickedItem.Tag;\nSetMode(e.ClickedItem);\n}\n#endif\n}\n\nprivate void _syncWithAndroidItem_Click(object sender, EventArgs e)\n{\nAndroidSynchronization.DoAndroidSync(Project);\n}\nprivate void Shell_ResizeEnd(object sender, EventArgs e)\n{\nif (WindowState != FormWindowState.Normal)\nreturn;\n\nSettings.Default.RestoreBounds = new Rectangle(Left, Top, Width, Height);\nSettings.Default.Save();\n}\n\nprivate string _previousActor;\nprivate string _previousCharacter;\n\nprivate void _actorCharacterButton_Click(object sender, EventArgs e)\n{\nvar chooser = new ActorCharacterChooser();\n_previousActor = Project.ActorCharacterProvider.Actor;\n_previousCharacter = Project.ActorCharacterProvider.Character;\nchooser.ActorCharacterProvider = Project.ActorCharacterProvider;\nchooser.Location = new Point(_actorCharacterButton.Left, _multiVoicePanel.Top);\nchooser.Closed += (o, args) =>\n{\nUpdateActorCharacter(Project.ActorCharacterProvider, false);\n// Figure out whether the mouse is now in the panel.\nMultiVoicePanelOnMouseTransition(null, null);\n// And may need to redraw even if the transition code thinks it hasn't changed,\n// since something seems to cache the state behind the control.\n_multiVoicePanel.Invalidate();\n};\nthis.Controls.Add(chooser);\nchooser.BringToFront();\n// gives it a chance to notice we are up and turn off the border rectangle.\n_multiVoicePanel.Invalidate();\n}\n\nprivate string _originalCurrentActorItemText;\n\nprivate void UpdateActorCharacter(IActorCharacterProvider provider, bool initializing)\n{\nif (_originalCurrentActorItemText == null)\n_originalCurrentActorItemText = _limitToCurrentActorItem.Text;\nif (!initializing && _previousActor == provider.Actor && _previousCharacter == provider.Character)\nreturn; // nothing changed.\nif (string.IsNullOrEmpty(provider.Actor))\n{\n_actorLabel.Text = _originalActorText;\n_characterLabel.Text = \"\";\n_actorLabel.Font = new Font(_originalActorFont.FontFamily, 32.0f);\n_limitToCurrentActorItem.Visible = false;\n}\nelse\n{\n_actorLabel.Text = provider.Actor;\n_characterLabel.Text = provider.Character;\n_actorLabel.Font = _originalActorFont;\n_limitToCurrentActorItem.Visible = true;\n_limitToCurrentActorItem.Text = string.Format(_originalCurrentActorItemText, provider.Actor);\n}\n// When initializing, we want any saved current position to win. Also, we don't yet have\n// things initialized enough to call this method.\nif (!initializing)\n_recordingToolControl1.UpdateForActorCharacter();\n}\n\nprivate void _actorLabel_Click(object sender, EventArgs e)\n{\n_actorCharacterButton_Click(sender, e);\n}\n\nprivate void _characterLabel_Click(object sender, EventArgs e)\n{\n_actorCharacterButton_Click(sender, e);\n}\n\nprivate void _saveHearthisPackItem_Click(object sender, EventArgs e)\n{\nvar dlg = new SaveFileDialog();\ndlg.Filter = HearThisPackFilter;\ndlg.RestoreDirectory = true;\nif (dlg.ShowDialog() != DialogResult.OK || string.IsNullOrEmpty(dlg.FileName))\nreturn;\nvar packer = new HearThisPackMaker(Project.ProjectFolder);\nif (_limitToCurrentActorItem.Checked && Project.ActorCharacterProvider != null)\npacker.Actor = Project.ActorCharacterProvider.Actor;\nvar progressDlg = new MergeProgressDialog();\n// See comment in merge...dialog will close when user clicks OK AFTER this method returns.\nprogressDlg.Closed += (o, args) => progressDlg.Dispose();\nprogressDlg.SetSource(Path.GetFileName(dlg.FileName));\nprogressDlg.Show(this);\n// Enhance: is it worth having the message indicate whether we are restricting to actor?\n// If it didn't mean yet another message to localize I would.\nprogressDlg.SetLabel(string.Format(LocalizationManager.GetString(\"MainWindow.SavingTo\", \"Saving to {0}\", \"Keep {0} as a placeholder for the file name\")\n, Path.GetFileName(dlg.FileName)));\nprogressDlg.Text = string.Format(LocalizationManager.GetString(\"MainWindow.SavingHearThisPack\", \"Saving {0}\", \"{0} will be the file extension, HearThisPack\"), \"HearThisPack\");\npacker.Pack(dlg.FileName, progressDlg.LogBox);\nprogressDlg.LogBox.WriteMessage(string.Format(LocalizationManager.GetString(\"MainWindow.PackComplete\", \"{0} is complete--click OK to close this window\"), \"HearThisPack\"));\nprogressDlg.SetDone();\n}\n\nprivate static string HearThisPackFilter => @\"HearThisPack files (*\" + HearThisPackMaker.HearThisPackExtension + @\")|*\" +\nHearThisPackMaker.HearThisPackExtension;\n\nprivate void _mergeHearthisPackItem_Click(object sender, EventArgs e)\n{\nvar dlg = new OpenFileDialog();\ndlg.Filter = HearThisPackFilter;\ndlg.RestoreDirectory = true;\ndlg.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);\nif (dlg.ShowDialog() != DialogResult.OK)\nreturn;\nusing (var reader = new HearThisPackReader(dlg.FileName))\n{\nif (reader.ProjectName.ToLowerInvariant() != Project.Name.ToLowerInvariant())\n{\nvar msg = LocalizationManager.GetString(\"MainWindow.MergeNoData\",\n\"This HearThis pack does not have any data for {0}. It contains data for {1}. If you want to merge it please open that project.\",\n\"Keep {0} as a placeholder for the current project name, {1} for the project in the file\");\nMessageBox.Show(this,\nstring.Format(msg, Project.Name, reader.ProjectName),\nLocalizationManager.GetString(\"MainWindow.MergeWrongProject\", \"Wrong Project\"),\nMessageBoxButtons.OK,\nMessageBoxIcon.Warning);\nreturn;\n}\nvar packLink = reader.GetLink();\nvar ourLink = new WindowsLink(Program.ApplicationDataBaseFolder);\nvar merger = new RepoMerger(Project, ourLink, packLink);\nmerger.SendData = false; // don't need to send anything to the hear this pack\n// Don't change this to using...we want the dialog to stay open after this method returns,\n// so the user can read the progress information (which may be quite useful as a record\n// of what was merged). And we can't dispose it until it closes, so just arrange an\n// event to do it then.\nvar progressDlg = new MergeProgressDialog();\nprogressDlg.Closed += (o, args) => progressDlg.Dispose();\nprogressDlg.SetLabel(Path.GetFileName(dlg.FileName));\nprogressDlg.Show(this);\nmerger.Merge(progressDlg.LogBox);\n_recordingToolControl1.UpdateAfterMerge();\nprogressDlg.LogBox.WriteMessage(LocalizationManager.GetString(\"MergeProgressDialog.MergeComplete\", \"Merge is complete--click OK to close this window\"));\nprogressDlg.SetDone();\n}\n}\n\nprivate void supportToolStripMenuItem_Click(object sender, EventArgs e)\n{\nProcess.Start(@\"https://community.scripture.software.sil.org/\");\n}\n}\n}\n"}
{"new_contents": "\ufeffprotected virtual void Write(IGTFSTargetFile levelsFile, IEnumerable<Level> levels)\n{\nif (levelsFile == null) return;\n\nbool initialized = false;\nvar data = new string[3];\nforeach (var level in levels)\n{\nif (!initialized)\n{\nif (levelsFile.Exists)\n{\nlevelsFile.Clear();\n}\n\n// write headers.\ndata[0] = \"level_id\";\ndata[1] = \"level_index\";\ndata[2] = \"level_name\";\nlevelsFile.Write(data);\ninitialized = true;\n}"}
{"new_contents": "/// <summary>Indicates that the map is empty</summary>\npublic bool IsEmpty => this == Empty;\n\n/// <summary>The count of entries in the map</summary>\npublic virtual int Count() => 0;\n\ninternal virtual bool MayTurnToBranch2 => false;\n\ninternal virtual Entry GetMinHashEntryOrDefault() => null;\ninternal virtual Entry GetMaxHashEntryOrDefault() => null;\n\n/// <summary>Lookup for the entry by hash.\n/// The returned entry maybe either single entry or the `HashConflictEntry` with multiple key-value entries for the same hash.\n/// If hash does not match the method returns `null`</summary>\ninternal virtual Entry GetEntryOrNull(int hash) => null;"}
{"new_contents": "\ufeff/// <summary>\n/// Method for adding new cells to the ActualGeneration.\n/// </summary>\n/// <param name=\"cell\">Send the cell you want to add.</param>\npublic void AddCell(Cell cell)\n{\nActualGeneration.SetValue(cell, cell.X, cell.Y);\n}"}
{"new_contents": "\ufeff\npublic string Name\n{\nget\n{\nreturn this.loggerName;\n}\n}\n\n/// <summary>\n/// Log level property\n/// </summary>\npublic LogLevel Level\n{\nget\n{\nreturn this.logLevel;\n}\nset\n{\nthis.logLevel = value;\n}\n}"}
{"new_contents": "static void ThrowInvalidOperationException(string message) => throw new InvalidOperationException(message);\n"}
{"new_contents": "\ufeff/// <summary>\n/// Initializes a new instance of the <see cref=\"Line\" /> class.\n/// </summary>\n/// <param name=\"scintilla\">The <see cref=\"Scintilla\" /> control that created this line.</param>\n/// <param name=\"index\">The index of this line within the <see cref=\"LineCollection\" /> that created it.</param>\npublic Line(Scintilla scintilla, int index)\n{\nthis.scintilla = scintilla;\nIndex = index;\n}"}
{"new_contents": "\ufeff/// <summary>\n///     Determines whether a specified characters occurs within this string. A parameter\n///     specifies the culture, case, and sort rules used in the comparison.\n/// </summary>\n/// <param name=\"source\">\n///     The string to browse.\n/// </param>\n/// <param name=\"comparisonType\">\n///     One of the enumeration values that specifies the rules for the search.\n/// </param>\n/// <param name=\"targets\">\n///     The sequence of characters to seek.\n/// </param>\npublic static bool ContainsEx(this string source, StringComparison comparisonType, params char[] targets)\n{\ntry\n{\nvar r = targets.Any(x => source.IndexOf(x.ToString(), 0, comparisonType) != -1);\nreturn r;\n}\ncatch\n{\nreturn false;\n}\n}\n"}
{"new_contents": "\ufeffpublic interface ICommandExtension {\nICommand Command { get; set; }\n}\n"}
{"new_contents": "\ufeffstring[] dirs = { \"data\", \"foreign_keys\", \"functions\",\n\"indexes\", \"procs\", \"tables\", \"triggers\" };\nforeach (string dir in dirs) {\nif (!Directory.Exists(args[2] + \"/\" + dir)) {\nDirectory.CreateDirectory(args[2] + \"/\" + dir);\n}\n}"}
{"new_contents": "var RunProcess = new Action<FilePath, ProcessSettings> ((process, settings) =>\n{\nvar result = StartProcess(process, settings);\nif (result != 0) {\nthrow new Exception (\"Process '\" + process + \"' failed with error: \" + result);\n}\n});\n"}
{"new_contents": "\ufeffprivate static void PrintRegexMatch(Match m)\n{\nvar matchCount = 0;\nwhile (m.Success)\n{\nConsole.WriteLine(\"Match\" + (++matchCount));\nfor (int i = 1; i <= 2; i++)\n{\nvar g = m.Groups[i];\nConsole.WriteLine(\"Group\" + i + \"='\" + g + \"'\");\n\nvar cc = g.Captures;\nfor (int j = 0; j < cc.Count; j++)\n{\nvar c = cc[j];\nConsole.WriteLine(\"Capture\" + j + \"='\" + c + \"', Position=\" + c.Index);\n}\n}\nm = m.NextMatch();\n}\n}\n"}
{"new_contents": "public override bool InfoBoxCameraVisible (ViewContext context)  {\nreturn VisibilityForContext (context, \"infobox\", \"camera\", false);\n}\n"}
{"new_contents": "private bool GestureMagnify(IMouseDevice device, ulong timestamp, IInputRoot root, Point p,\nPointerPointProperties props, Vector delta, KeyModifiers inputModifiers)\n{\ndevice = device ?? throw new ArgumentNullException(nameof(device));\nroot = root ?? throw new ArgumentNullException(nameof(root));\n\nvar hit = HitTest(root, p);\n\nif (hit != null)\n{\nvar source = GetSource(hit);\nvar e = new PointerDeltaEventArgs(Gestures.PointerTouchPadGestureMagnifyEvent, source,\n_pointer, root, p, timestamp, props, inputModifiers, delta);\n\nsource?.RaiseEvent(e);\nreturn e.Handled;\n}\n\nreturn false;\n}"}
{"new_contents": "\ufeff\n/// <summary>\n///     Type (name) of this language object.\n/// </summary>\npublic LanguageType Type { get; }\n\ninternal Orthography Orthography { get; }\ninternal Morphotactics Morphotactics { get; }\n\ninternal MorphemeContainer<Suffix> Suffixes { get; }\ninternal MorphemeContainer<Root> Roots { get; }\n\nprivate WordAnalyzer Analyzer { get; }"}
{"new_contents": "\ufeff\n/// <summary>\n/// Logs a message as failure. Halts execution.\n/// </summary>\n[ContractAnnotation(\"=> halt\")]\npublic static void Fail(string text)\n{\nthrow new Exception(text);\n}"}
{"new_contents": "\ufeff// <summary>\n/// Maximum length of <see cref=\"ServiceName\"/> property.\n/// </summary>\npublic const int MaxServiceNameLength = 256;\n\n/// <summary>\n/// Maximum length of <see cref=\"MethodName\"/> property.\n/// </summary>\npublic const int MaxMethodNameLength = 256;\n\n/// <summary>\n/// Maximum length of <see cref=\"Parameters\"/> property.\n/// </summary>\npublic const int MaxParametersLength = 1024;\n\n/// <summary>\n/// Maximum length of <see cref=\"ClientIpAddress\"/> property.\n/// </summary>\npublic const int MaxClientIpAddressLength = 64;\n"}
{"new_contents": "// Copyright (c) The Avalonia Project. All rights reserved.\n// Licensed under the MIT license. See licence.md file in the project root for full license information.\n\nusing System;\nusing System.Linq;\nusing System.Reactive.Linq;\nusing Avalonia.Controls.Notifications;\nusing Avalonia.Controls.Primitives;\nusing Avalonia.Input;\nusing Avalonia.Input.Raw;\nusing Avalonia.Layout;\nusing Avalonia.Logging;\nusing Avalonia.LogicalTree;\nusing Avalonia.Platform;\nusing Avalonia.Rendering;\nusing Avalonia.Styling;\nusing Avalonia.Utilities;\nusing Avalonia.VisualTree;\nusing JetBrains.Annotations;"}
{"new_contents": "// Copyright (c) The Avalonia Project. All rights reserved.\n// Licensed under the MIT license. See licence.md file in the project root for full license information.\n\nusing System;\nusing System.Linq;\nusing Avalonia.Logging;\nusing Avalonia.VisualTree;\n\nnamespace Avalonia.Layout\n{\n/// <summary>\n/// Defines how a control aligns itself horizontally in its parent control.\n/// </summary>\npublic enum HorizontalAlignment\n{\n/// <summary>\n/// The control stretches to fill the width of the parent control.\n/// </summary>\nStretch,\n\n/// <summary>\n/// The control aligns itself to the left of the parent control.\n/// </summary>\nLeft,\n\n/// <summary>\n/// The control centers itself in the parent control.\n/// </summary>\nCenter,\n\n/// <summary>\n/// The control aligns itself to the right of the parent control.\n/// </summary>\nRight,\n}\n\n/// <summary>\n/// Defines how a control aligns itself vertically in its parent control.\n/// </summary>\npublic enum VerticalAlignment\n{\n/// <summary>\n/// The control stretches to fill the height of the parent control.\n/// </summary>\nStretch,\n\n/// <summary>\n/// The control aligns itself to the top of the parent control.\n/// </summary>\nTop,\n\n/// <summary>\n/// The control centers itself within the parent control.\n/// </summary>\nCenter,\n\n/// <summary>\n/// The control aligns itself to the bottom of the parent control.\n/// </summary>\nBottom,\n}\n\n}\n"}
{"new_contents": ""}
{"new_contents": "public static void nullLoader()\n{\nmodelHeaders = null;\naBooleanArray1663 = null;\naBooleanArray1664 = null;\nanIntArray1665 = null;\nanIntArray1666 = null;\nanIntArray1667 = null;\nanIntArray1668 = null;\nanIntArray1669 = null;\nanIntArray1670 = null;\nanIntArray1671 = null;\nanIntArrayArray1672 = null;\nanIntArray1673 = null;\nanIntArrayArray1674 = null;\nanIntArray1675 = null;\nanIntArray1676 = null;\nanIntArray1677 = null;\nSINE = null;\nCOSINE = null;\nHSLtoRGB = null;\nmodelIntArray4 = null;\n}"}
{"new_contents": "\ufeff/*\n* Copyright (c) 2011 Stephen A. Pratt\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n* THE SOFTWARE.\n*/\nusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;"}
{"new_contents": "\ufeff/// <summary>\n/// Time counter for the animation\n/// </summary>\nprotected double AddedTime;\n\n/// <summary>\n/// The current frame index being animated.\n/// </summary>\nprotected int CurrentFrameIndexValue;\n\n/// <summary>\n/// How much time per animated frame should be used.\n/// </summary>\nprotected float TimePerFrame;"}
{"new_contents": "\ufeff"}
{"new_contents": "\ufeffwhile (index.ContainsKey(sfmId)) // is a duplicate\n{\n++homograph;\nsfmId = adaptedEntry.SfmID + \"_\" + homograph;\n}"}
{"new_contents": "\ufeffprivate readonly string _tempFolder;\nprivate long _cachedAssembliesHash = -1;\nprivate long _currentAssembliesHash = -1;"}
{"new_contents": "\ufeff\nvar result = \"Apps (exluding this):\";\nresult += Environment.NewLine + apps;\nresult += Environment.NewLine + Environment.NewLine + \"Tables:\";\nresult += Environment.NewLine + tables;\nresult += Environment.NewLine + Environment.NewLine + \"Columns:\";\nresult += Environment.NewLine + columns;"}
{"new_contents": "\ufeff// Split message into parts to avoid SQL errors.\nfor (var i = 0; i < message.Length; i += 3000)\n{\nvar length = Math.Min(3000, message.Length - i);\nvar part = message.Substring(i, length);\nif (parts.Count > 0)\n{\npart = \"(Truncated message continued) \" + part;\n}\nparts.Add(part);\n}"}
{"new_contents": "\ufeffprivate static Stopwatch timer;\nprivate static long lastMillis;\nprivate static ulong nodeCounter;\nprivate static string outputFormat;"}
{"new_contents": ""}
{"new_contents": "\ufeffprotected override void ApplyNormalVisibilityState(DrawableHitObject hitObject, ArmedState state)\n{\napplyState(hitObject, false);\n}\n"}
{"new_contents": "// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\nusing System;\nusing System.Linq;\nusing osu.Framework.Bindables;\nusing osu.Game.Beatmaps;\nusing osu.Game.Configuration;\nusing osu.Game.Rulesets.Mods;\nusing osu.Game.Rulesets.Objects;\nusing osu.Game.Rulesets.Osu.Objects;\nusing osu.Game.Rulesets.Osu.UI;\nusing osuTK;\n\nnamespace osu.Game.Rulesets.Osu.Mods\n{\n/// <summary>\n/// Mod that randomises the positions of the <see cref=\"HitObject\"/>s\n/// </summary>\npublic class OsuModRandom : ModRandom, IApplicableToBeatmap\n{\n\n}\n}\n"}
{"new_contents": "\ufeffprivate readonly Texture texture;\n\npublic Triangles()\n{\ntexture = Texture.WhitePixel;\n}"}
{"new_contents": "\ufeffprotected readonly TriangleButton DeselectAllButton;\nprotected readonly TriangleButton CustomiseButton;\nprotected readonly TriangleButton CloseButton;"}
{"new_contents": "\ufeffpublic void SetIcon(Drawable icon)\n{\nIconContainer.Icon = icon;\nIconContainer.Show();\n}\n"}
{"new_contents": "/// <summary>\n/// The default span of time visible by the length of the scrolling axes.\n/// This is clamped between <see cref=\"time_span_min\"/> and <see cref=\"time_span_max\"/>.\n/// </summary>\nprivate const double time_span_default = 1500;\n/// <summary>\n/// The minimum span of time that may be visible by the length of the scrolling axes.\n/// </summary>\nprivate const double time_span_min = 50;\n/// <summary>\n/// The maximum span of time that may be visible by the length of the scrolling axes.\n/// </summary>\nprivate const double time_span_max = 10000;\n/// <summary>\n/// The step increase/decrease of the span of time visible by the length of the scrolling axes.\n/// </summary>\nprivate const double time_span_step = 50;\n"}
{"new_contents": "\ufeffprotected override void OnUserScroll(float value, bool animated = true, double? distanceDecay = default)\n{\nUserScrolling = true;\nbase.OnUserScroll(value, animated, distanceDecay);\n}"}
{"new_contents": "private RegTestFixture RegTestFixture { get; }\n\npublic RegTests(RegTestFixture regTestFixture)\n{\nRegTestFixture = regTestFixture;\n}\n"}
{"new_contents": "public enum TorchDirection\n{\nSouth = 0x01, // Positive Z\nNorth = 0x02,\nWest = 0x03,\nEast = 0x04,\nGround = 0x05\n}\n"}
{"new_contents": "using System;\nusing System.IO;\nusing System.Reflection;\nusing System.Windows.Media.Imaging;\nusing Autodesk.Revit.ApplicationServices;\nusing Autodesk.Revit.DB;\nusing Autodesk.Revit.UI;\n"}
{"new_contents": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace UnanimousOverkillGame\n{\nclass CollisionManager\n{\n}\n}\n"}
{"new_contents": "\ufeffpublic OptionsPageGeneral() {\nOutputPane = Resources.ExtensionName;\nMaximumShelvesets = 0;\nShelvesetName = \"Auto {0}\";\nTimerSaveInterval = 5;\nPauseWhileDebugging = false;\n}\n"}
{"new_contents": "\ufeff/*\n* Created by SharpDevelop.\n* User: Phonic Mouse\n* Date: 02/08/2016\n* Time: 15:16\n*/\nusing System;\n\nnamespace SharpPaste\n{\npublic class Config\n{\n///----Application Config----///\npublic static string HOSTINGTYPE = \"ASP.NET\";\npublic static string DBPATH = string.Format(@\"{0}db\\Pastes.db\", AppDomain.CurrentDomain.BaseDirectory);\n\n///----Paste Config----///\npublic static int TOKENLENGTH = 23;\n}\n}\n"}
{"new_contents": "public int CurrentTab {\nget {\nreturn Widget.CurrentPage;\n}\nset {\nWidget.CurrentPage = value;\n}\n}"}
{"new_contents": "\ufeffprivate void MiniForm()\n{\nWindowState = FormWindowState.Minimized;\n}"}
{"new_contents": "\ufeffpublic static String API_Version => \"v1\";\n\npublic static String API_Name => $\"Battery Commander {API_Version}\";\n\npublic static String APP_INSIGHTS_KEY = \"66d7081f-e4a1-421f-b57a-38656917ee3d\";\n\nprivate static Boolean IsDevelopment;"}
{"new_contents": "\ufeff"}
{"new_contents": ""}
{"new_contents": "\ufefffor (int i = 0; i < players.Length; i ++)\n{\nsb.DrawString(font, \"P\" + (i + 1) + \": \" + players[i].score, temp, Color.White);\ntemp.Y += 32;\n}"}
{"new_contents": "\ufeffroutes.MapRoute(\"SecureReceivePack\", \"{project}.git/git-receive-pack\",\nnew { controller = \"Git\", action = \"SecureReceivePack\" },\nnew { method = new HttpMethodConstraint(\"POST\") });"}
{"new_contents": "\ufeffpublic class CreateSlothTransactionResponse\n{\npublic string Id { get; set; }\n}"}
{"new_contents": "\ufeffpublic void Dispose () {\nif (_filePath == null) {\nDebug.Log(\"Aborting!\");\nreturn;\n}"}
{"new_contents": "\ufeffusing System;\nusing System.Collections.Generic;\n\nnamespace ThingFilter\n{\n\n}\n"}
{"new_contents": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing NUnit.Framework;\nusing Abaqus;\nusing System.IO;\n\nnamespace UnitTest.ParserTests\n{\n[TestFixture]\npublic class ParserTest\n{\n[Test]\npublic void DummyTest()\n{\nAssert.True(true);\n}\n\n}\n\n\n}\n"}
{"new_contents": "// Copyright 2006 Alp Toker <alp@atoker.com>\n// This software is made available under the MIT License\n// See COPYING for details\n\nusing System;\nusing System.IO;\nusing System.Net;\nusing System.Net.Sockets;\n\nusing System.Runtime.InteropServices;\n\nusing Mono.Unix;\nusing Mono.Unix.Native;\n\nnamespace NDesk.DBus\n{\npublic class UnixSocket\n{\n//TODO: verify these\n[DllImport (\"libc\")]\nprotected static extern int socket (int domain, int type, int protocol);\n\n}\n}\n"}
{"new_contents": "\ufeff/*\nThe MIT License(MIT)\nCopyright(c) 2015 Freddy Juhel\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing System.Windows.Forms;\nusing System.Xml.Linq;\nusing WaitingLog.Properties;\n\nnamespace WaitingLog\n{\npublic partial class FormMain : Form\n{\npublic FormMain()\n{\nInitializeComponent();\n}\n\n}\n}\n"}
{"new_contents": "class Dead2 { } // lgtm\n// lgtm[cs/unused-reftype]\n// lgtm[cs/unused-reftype, cs/unused-field]\n// lgtm[@tag:nullness]\n// lgtm[@tag:useless-code,cs/unused-reftype]\n// lgtm[@expires:2017-06-11]\n// lgtm[cs/unused-reftype] because I know better than lgtm\n// lgtm: blah blah\n// lgtm blah blah #falsepositive\n//lgtm  [cs/unused-reftype]\n/* lgtm */\n// lgtm[]\n// lgtmfoo\n//lgtm\n//  lgtm\n// lgtm [cs/unused-reftype]\n// foolgtm[cs/unused-reftype]\n// foolgtm\n// foo; lgtm\n// foo; lgtm[cs/unused-reftype]\n// foo lgtm\n// foo lgtm[cs/unused-reftype]\n// foo lgtm bar\n// foo lgtm[cs/unused-reftype] bar\n// LGTM!\n// LGTM[cs/unused-reftype]\n// lgtm[cs/unused-reftype] and lgtm[cs/unused-field]\n// lgtm[cs/unused-reftype]; lgtm\n/* lgtm[] */\n/* lgtm[cs/unused-reftype] */\n/* lgtm\n*/\n/* lgtm\n*/\n/* lgtm[@tag:nullness,cs/unused-reftype] */\n/* lgtm[@tag:nullness] */\n"}
{"new_contents": "public enum NameType {\nFemaleFirst,\nMaleFirst,\nLastNames,\nMixedFirstNames\n}\n\n"}
{"new_contents": "\ufeffnamespace AngleSharp.Core.Tests\n{\nusing AngleSharp.Dom;\nusing AngleSharp.Extensions;\nusing AngleSharp.Html;\nusing NUnit.Framework;\nusing System;\n\n/// <summary>\n/// Tests from https://github.com/html5lib/html5lib-tests:\n/// tree-construction/domjs-unsafe.dat\n/// </summary>\n[TestFixture]\npublic class UserJsUnsafeTests\n{\n\n}\n}"}
{"new_contents": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Threading;\nusing System.Net;\nusing System.Net.Sockets;\nusing Newtonsoft.Json.Linq;\nusing MouseEvent;\nusing System.Runtime.InteropServices;\nusing System.IO;\nusing System.Windows.Media;\nusing System.Windows.Controls;\nusing System.Windows.Interop;\nusing System.Windows;\n\nnamespace DoubleCursor\n{\nclass IPC\n{\nLocalIndicator localIndicator;\nRemoteIndicator remoteIndicator;\nLocalCursor localCursor;\nRemoteCursor remoteCursor;\n\nprivate static extern void mouse_event(int dwFlags, int dx, int dy, int dwData, int dwExtraInfo);\n\n}\n}\n"}
{"new_contents": "\ufeff//\n// The MIT License (MIT)\n//\n// Copyright (c) 2014 Alex R\u00f8nne Petersen\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nusing System.Threading;\n\nnamespace Mono.Debugger.Client\n{\npublic static class CommandLine\n{\ninternal static AutoResetEvent ResumeEvent { get; private set; }\n\ninternal static bool InferiorExecuting { get; set; }\n\nstatic CommandLine()\n{\nResumeEvent = new AutoResetEvent(false);\n}\n\ninternal static void SetControlCHandler()\n{\n}\n\ninternal static void UnsetControlCHandler()\n{\n}\n\npublic static void WaitForSuspend() {\nif (InferiorExecuting)\n{\nResumeEvent.WaitOne();\nInferiorExecuting = false;\n}\n}\n}\n}\n"}
{"new_contents": "\ufeffif (messageContent.Length == 0)\n{\nreturn null;\n}"}
{"new_contents": "\ufeff"}
{"new_contents": "\ufeffprivate class JoystickDevice\n{\n/// <summary>\n/// Amount of axes supported by OpenTK.\n/// </summary>\npublic const int MAX_AXES = 64;\n\n/// <summary>\n/// Amount of buttons supported by OpenTK.\n/// </summary>\npublic const int MAX_BUTTONS = 64;\n\n/// <summary>\n/// Amount of hats supported by OpenTK.\n/// </summary>\npublic const int MAX_HATS = 4;\n\n/// <summary>\n/// Amount of movement around the \"centre\" of the axis that counts as moving within the deadzone.\n/// </summary>\nprivate const float deadzone_threshold = 0.05f;\n}"}
{"new_contents": "// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\nusing System;\nusing osu.Framework.Graphics;\nusing osu.Framework.Graphics.Textures;\nusing osu.Framework.Audio.Sample;\nusing osu.Framework.Bindables;\nusing osu.Game.Rulesets.Scoring;\nusing osu.Game.Audio;\nusing osu.Game.Beatmaps;\nusing osu.Game.Rulesets.Mania.Beatmaps;\nusing osu.Game.Skinning;\nusing System.Collections.Generic;\n\nnamespace osu.Game.Rulesets.Mania.Skinning\n{\npublic class ManiaLegacySkinTransformer : ISkin\n{\nprivate readonly ISkin source;\nprivate readonly ManiaBeatmap beatmap;\n\n}\n}\n"}
{"new_contents": "protected override Drawable CreateBackground()\n{\nbackground = base.CreateBackground();\nbackground.Width = 2;\nreturn background;\n}"}
{"new_contents": "\ufeffprivate bool _isLoading;\n/// <summary>\n/// <code>true</code> if store is loading. Useful to show a progress indicator.\n/// </summary>\npublic bool IsLoading {\nget { return _isLoading; }\ninternal set {\n_isLoading = value;\nif (PropertyChanged != null) {\nPropertyChanged(this, new PropertyChangedEventArgs(\"IsLoading\"));\n}\n}\n}"}
{"new_contents": "class Program\n{\n// ReSharper disable once UnusedMember.Local\n// ReSharper disable once ArrangeTypeMemberModifiers\n// ReSharper disable once SuggestBaseTypeForParameter\n// ReSharper disable once UnusedParameter.Local\nstatic void Main(string[] args)\n{\nRunTests().Wait();\nDebug.WriteLine(\"All tests executed successfully\");\n}\n}"}
{"new_contents": "private readonly SemanticModel semanticModel;\n"}
{"new_contents": "\ufeff[TempData]\npublic string StatusMessage { get; set; }"}
{"new_contents": ""}
{"new_contents": "\ufeff/// <summary>\n/// Image Version to be generated automatically\n/// </summary>\n/// <remarks>\n/// Specify either Width or Height you don't need to have both.\n/// </remarks>\npublic interface IImageVersion\n{\n#region Properties\n/// <summary>\n/// Image Width\n/// </summary>\nint Width\n{\nget;\nset;\n}\n\n/// <summary>\n/// Image Height\n/// </summary>\nint Height\n{\nget;\nset;\n}\n#endregion\n}"}
{"new_contents": "\ufeffnamespace KraxbotOSS\n{\npartial class FormLogin\n{\n\n}\n}\n"}
{"new_contents": "\ufeffprivate void Dispose(bool disposing)\n{\n// Check to see if Dispose has already been called.\nif (!disposed)\n{\n// If disposing equals true, dispose all managed\n// and unmanaged resources.\nif (disposing)\n{\n// Dispose managed resources.\n}\n\n// Call the appropriate methods to clean up\n// unmanaged resources here.\nNativeMethods.git_revwalk_free(walker);\n\n// Note disposing has been done.\ndisposed = true;\n}\n}"}
{"new_contents": "[Test]\npublic void IsEmpty3()\n{\nIXLWorksheet ws = new XLWorkbook().Worksheets.Add(\"Sheet1\");\nIXLCell cell = ws.Cell(1, 1);\ncell.Style.Fill.BackgroundColor = XLColor.Red;\nbool actual = cell.IsEmpty();\nbool expected = true;\nAssert.AreEqual(expected, actual);\n}"}
{"new_contents": "\ufeff// HTMLContent\npublic string _HTMLContent;\npublic string HTMLContent\n{\nget\n{\nreturn _HTMLContent;\n}\nset\n{\nSet(() => HTMLContent, ref _HTMLContent, value);\n\n}\n}\n"}
{"new_contents": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Http;\nusing Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling;\nusing Stardust.Manager.Extensions;\nusing Stardust.Manager.Helpers;\nusing Stardust.Manager.Interfaces;\nusing Stardust.Manager.Models;\n\nnamespace Stardust.Manager\n{\npublic class JobRepository : IJobRepository\n{\nprivate readonly RetryPolicyProvider _retryPolicyProvider;\nprivate readonly RetryPolicy _retryPolicy;\nprivate readonly string _connectionString;\n\npublic JobRepository(string connectionString, RetryPolicyProvider retryPolicyProvider)\n{\n_connectionString = connectionString;\n_retryPolicyProvider = retryPolicyProvider;\n_retryPolicy = retryPolicyProvider.GetPolicy();\n}\n}\n}"}
{"new_contents": "delegate void ActionSheetHandler(ActionSheetAction arg0);\n\ndelegate void RippleCompletionBlock();\n\ndelegate void ActivityIndicatorAnimationHandler(nfloat strokeStart, nfloat strokeEnd);\n\ndelegate void ActionHandler(AlertAction action);\n\ndelegate void FeatureHighlightCompletionHandler(bool accepted);\n\ndelegate void FlexibleHeaderChangeContentInsetsHandler();\n\ndelegate void FlexibleHeaderShadowIntensityChangeHandler(CALayer shadowLayer, nfloat intensity);\n\ndelegate void InkCompletionHandler();\n\ndelegate void EnumerateOverlaysHandler(IOverlay overlay, nuint idx, ref bool stop);\n\ndelegate void SnackbarMessageCompletionHandler(bool arg0);\n\ndelegate void SnackbarMessageActionHandler();"}
{"new_contents": "\ufeff{\ntimeout = TimeSpan.FromSeconds(100);\n"}
{"new_contents": "\ufeffusing System.Reflection;\nusing System.Runtime.InteropServices;\n\n// General Information about an assembly is controlled through the following\n// set of attributes. Change these attribute values to modify the information\n// associated with an assembly.\n[assembly: AssemblyTitle(\"Nowin\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"Boris Letocha\")]\n[assembly: AssemblyProduct(\"Nowin\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9 2015\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n\n// Setting ComVisible to false makes the types in this assembly not visible\n// to COM components.  If you need to access a type in this assembly from\n// COM, set the ComVisible attribute to true on that type.\n[assembly: ComVisible(false)]\n\n// The following GUID is for the ID of the typelib if this project is exposed to COM\n[assembly: Guid(\"fd085b68-3766-42af-ab6d-351b7741c685\")]\n\n// Version information for an assembly consists of the following four values:\n//\n//      Major Version\n//      Minor Version\n//      Build Number\n//      Revision\n//\n// You can specify all the values or you can default the Build and Revision Numbers\n// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]\n[assembly: AssemblyVersion(\"0.20.0.0\")]\n[assembly: AssemblyFileVersion(\"0.20.0.0\")]\n"}
{"new_contents": "\ufeff/// <summary>\n/// Creates the package manager.\n/// </summary>\n/// <param name=\"fileSystem\">The file system.</param>\n/// <param name=\"useMachineCache\">if set to <c>true</c> [use machine cache].</param>\n/// <returns></returns>\nprotected virtual PackageManager CreatePackageManager(IFileSystem fileSystem, bool useMachineCache = false)\n{\nvar pathResolver = new DefaultPackagePathResolver(fileSystem, useSideBySidePaths: AllowMultipleVersions);\nvar packageManager = new PackageManager(_repository, pathResolver, fileSystem, new LocalPackageRepository(pathResolver, fileSystem));\npackageManager.Logger = Console;\n\nreturn packageManager;\n}\n"}
{"new_contents": "\ufeff/// <summary>\n/// Installs the package.\n/// </summary>\n/// <param name=\"packageManager\">The package manager.</param>\n/// <param name=\"fileSystem\">The file system.</param>\n/// <param name=\"packageId\">The package id.</param>\n/// <param name=\"version\">The version.</param>\n/// <param name=\"allowPreReleaseVersion\"> </param>\n/// <returns></returns>\ninternal bool InstallPackage(PackageManager packageManager, IFileSystem fileSystem, string packageId, SemanticVersion version, Boolean allowPreReleaseVersion = true)\n{\nif (packageManager.IsPackageInstalled(packageId, version))\n{\nreturn false;\n}"}
{"new_contents": "\ufeffstring CombineStrings(string[] items)\n{\n    string result = \"\";\n    foreach (var item in items)\n    {\n        result += item;\n    }\n    return result;\n}\n"}
{"new_contents": "\ufeffstring result = \"\";\nfor (int i = 0; i < 10000; i++)\n{\n    result += i.ToString();\n}\n"}
{"new_contents": "\ufeffstring message = string.Concat(\"Name: \", name, \", Age: \", age, \", City: \", city);\n"}
{"new_contents": "\ufeffstring welcome = \"Hello \" + name + \"! Welcome to \" + location + \".\";\n"}
{"new_contents": "\ufeffstring CombineEvenNumbers(int[] numbers)\n{\n    string result = \"\";\n    foreach (var num in numbers)\n    {\n        if (num % 2 == 0)\n            result += num + \", \";\n    }\n    return result;\n}\n"}
{"new_contents": "\ufeffpublic class ReportGenerator\n{\n    public string GetFormattedAddress(Customer customer)\n    {\n        return $\"{customer.Street}, {customer.City}, {customer.ZipCode}\";\n    }\n}"}
{"new_contents": "\ufeffpublic class LoanService\n{\n    public bool IsEligibleForLoan(Customer customer)\n    {\n        return customer.CreditScore > 700 && customer.AnnualIncome > 50000;\n    }\n}\n"}
{"new_contents": "\ufeffpublic class AddressConverter\n{\n    public string GetAddress(Customer customer)\n    {\n        return $\"{customer.Street}, {customer.City}, {customer.ZipCode}\";\n    }\n}"}
{"new_contents": "\ufeffpublic class CardAnalyser\n{\n    private readonly _number;\n\n    public CardAnalyser()\n    {\n        \n    }\n\n    public bool IsCardExpired(Card card)\n    {\n        return card.ExpirationDate < DateTime.Now;\n    }\n}"}
{"new_contents": "\ufeffpublic class BalanceControlService\n{\n    public decimal TotalBalance { get; set; }\n\n    public decimal GetTotalBalance(Account account)\n    {\n        return account.BankBalance + account.CreditBalance;\n    }\n}\n"}
{"new_contents": "\ufeffpublic class RegistrationService\n{\n    public string GetFullName(User user)\n    {\n        return $\"{user.FirstName} {user.LastName}\";\n    }\n}\n\npublic class User\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}"}
{"new_contents": "\ufeffpublic class DatabaseService\n{\n    public void ConfigureDatabase(string server, int port, string username, string password, string databaseName, bool useSSL)\n    {\n        Console.WriteLine($\"Configuring database at {server}:{port} using SSL: {useSSL}\");\n        Console.WriteLine($\"User: {username}, Database: {databaseName}\");\n    }\n}\n\nvar dbService = new DatabaseService();\ndbService.ConfigureDatabase(\"localhost\", 5432, \"admin\", \"password123\", \"MyDatabase\", true);\n"}
{"new_contents": "\ufeffpublic class ReportService\n{\n    public void GenerateReport(string title, DateTime startDate, DateTime endDate, string author, bool includeCharts, string[] filters)\n    {\n        Console.WriteLine($\"Generating report: {title} by {author}\");\n        Console.WriteLine($\"From {startDate} to {endDate}\");\n        Console.WriteLine($\"Include Charts: {includeCharts}, Filters: {string.Join(\", \", filters)}\");\n    }\n}\n"}
{"new_contents": "\ufeffpublic class AccountingService\n{\n    private readonly DatabaseContext _dbContext;\n\n    public AccountingService(DatabaseContext dbContext)\n    {\n        _dbContext = dbContext;\n    }\n\n    public void RecordTransaction(\n        string accountNumber,\n        DateTime transactionDate,\n        string description,\n        decimal debitAmount,\n        decimal creditAmount,\n        string currency,\n        string transactionType,\n        string costCenter)\n    {\n        // Valida\u00e7\u00e3o b\u00e1sica\n        if (debitAmount < 0 || creditAmount < 0)\n            throw new ArgumentException(\"Debit or Credit amounts cannot be negative.\");\n\n        // Cria\u00e7\u00e3o e persist\u00eancia da transa\u00e7\u00e3o\n        var transaction = new FinancialTransaction\n        {\n            AccountNumber = accountNumber,\n            TransactionDate = transactionDate,\n            Description = description,\n            DebitAmount = debitAmount,\n            CreditAmount = creditAmount,\n            Currency = currency,\n            TransactionType = transactionType,\n            CostCenter = costCenter\n        };\n\n        _dbContext.FinancialTransactions.Add(transaction);\n        _dbContext.SaveChanges();\n    }\n}"}
{"new_contents": "\ufeffpublic Report GenerateReport(\n    DateTime startDate,\n    DateTime endDate,\n    string[] accountNumbers,\n    string reportType,\n    string currency,\n    string[] costCenters,\n    string[] projectCodes,\n    bool includeDetails,\n    bool includeTransactions,\n    string approverName,\n    bool isFinalVersion)\n{\n    // Valida\u00e7\u00e3o dos par\u00e2metros\n    if (startDate >= endDate)\n        throw new ArgumentException(\"Start date must be earlier than end date.\");\n    if (accountNumbers == null || accountNumbers.Length == 0)\n        throw new ArgumentException(\"At least one account number must be provided.\");\n    if (string.IsNullOrWhiteSpace(reportType))\n        throw new ArgumentException(\"Report type is required.\");\n    if (string.IsNullOrWhiteSpace(currency))\n        throw new ArgumentException(\"Currency is required.\");\n    if (string.IsNullOrWhiteSpace(approverName))\n        throw new ArgumentException(\"Approver name is required.\");\n\n    // Simulando a busca de transa\u00e7\u00f5es com base nos par\u00e2metros\n    var transactions = new List<string>();\n    if (includeTransactions)\n    {\n        foreach (var account in accountNumbers)\n        {\n            transactions.Add($\"Transaction for Account: {account}, Date: {DateTime.Now}, Amount: 1000 {currency}\");\n        }\n    }\n\n    // Gerar t\u00edtulo do relat\u00f3rio\n    var title = $\"{reportType} Report - {startDate:yyyy-MM-dd} to {endDate:yyyy-MM-dd}\";\n\n    // Simula\u00e7\u00e3o de detec\u00e7\u00e3o de status baseado em dados\n    var status = isFinalVersion ? \"Approved\" : \"Draft\";\n\n    // Retornar o relat\u00f3rio gerado\n    return new Report\n    {\n        Title = title,\n        StartDate = startDate,\n        EndDate = endDate,\n        Currency = currency,\n        GeneratedBy = approverName,\n        GeneratedOn = DateTime.Now,\n        Transactions = transactions,\n        Status = status,\n        IsFinalVersion = isFinalVersion\n    };\n}\n"}
