new_contents
""
" <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> using System; <NEWLINE> "
""
[TestFixture] <NEWLINE> 
public string SceneName <NEWLINE>  <NEWLINE> 
public IntPtr FindControlHandle(IntPtr windowsHandle, string controlName) <NEWLINE> 
"public int ID { get; set; }"
"try <NEWLINE> { <NEWLINE> await _certifyClient.GetAppVersion(); <NEWLINE> isAvailable = true; <NEWLINE> } <NEWLINE> catch (Exception) <NEWLINE> { <NEWLINE> isAvailable = false; <NEWLINE> } <NEWLINE>  <NEWLINE> "
" <NEWLINE> return this; <NEWLINE> "
protected override JsonContract CreateContract(Type objectType)
"var updates = new List<UpdateInfo>(); <NEWLINE> var failures = new List<string>(); <NEWLINE> "
static void Main(string[] args) <NEWLINE> 
public Static2DMap(int width, int height, double horizontalAngle, double verticalAngle, ushort maxDepth, ushort hostHeight){
public void AddMarker(int id, Point topLeft, Point topRight, Point bottomLeft, Point bottomRight, int width, int depth, double yAngle){
 public void PlaceIndicator(string markerName, double startX, double startY, double size, float rotationAngle){ <NEWLINE> 
public void PositionLabel(int labelId, double xCoord, double yCoord, double width, double height, bool isVisible){ <NEWLINE>     
"private struct DepthData <NEWLINE> { <NEWLINE> public DepthData(ushort depth, bool isObstacle) <NEWLINE> { <NEWLINE> Depth = depth; <NEWLINE> IsObstacle = isObstacle; <NEWLINE> } <NEWLINE>  <NEWLINE> public ushort Depth { get; } <NEWLINE> public bool IsObstacle { get; } <NEWLINE> }"
"private NetworkCredential getNewNetworkCredential() <NEWLINE> { <NEWLINE> return new NetworkCredential(ftp_username, ftp_password); <NEWLINE> }"
" <NEWLINE> #region  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> #endregion <NEWLINE>  <NEWLINE> using System; <NEWLINE> using System.ComponentModel; <NEWLINE> using System.Diagnostics; <NEWLINE> using System.Drawing; <NEWLINE> using System.Globalization; <NEWLINE> using System.IO; <NEWLINE> using System.Linq; <NEWLINE> using System.Reflection; <NEWLINE> using System.Windows.Forms; <NEWLINE> using HearThis.Communication; <NEWLINE> using HearThis.Properties; <NEWLINE> using HearThis.Publishing; <NEWLINE> using HearThis.Script; <NEWLINE> using L10NSharp; <NEWLINE> using NetSparkle; <NEWLINE> using SIL.IO; <NEWLINE> using SIL.Windows.Forms.Miscellaneous; <NEWLINE> using SIL.Windows.Forms.ReleaseNotes; <NEWLINE> using Paratext; <NEWLINE> using SIL.DblBundle.Text; <NEWLINE> using SIL.Extensions; <NEWLINE> using SIL.Reporting; <NEWLINE>  <NEWLINE> namespace HearThis.UI <NEWLINE> { <NEWLINE> public partial class Shell : Form <NEWLINE> { <NEWLINE> public static Sparkle UpdateChecker; <NEWLINE> public event EventHandler OnProjectChanged; <NEWLINE> private string _projectNameToShow = string.Empty; <NEWLINE> private string _originalActorText; <NEWLINE> private Font _originalActorFont; <NEWLINE> private bool _mouseInMultiVoicePanel; <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> private const string kNormalRecording = ""NormalRecording""; <NEWLINE>  <NEWLINE> public Shell() <NEWLINE> { <NEWLINE> InitializeComponent(); <NEWLINE> Text = Program.kProduct; <NEWLINE>  <NEWLINE> _settingsProtectionHelper.ManageComponent(_settingsItem); <NEWLINE> _settingsProtectionHelper.ManageComponent(toolStripButtonChooseProject); <NEWLINE> SetupUILanguageMenu(); <NEWLINE>  <NEWLINE> _toolStrip.Renderer = new RecordingToolControl.NoBorderToolStripRenderer(); <NEWLINE> _moreMenu.ForeColor = AppPallette.NavigationTextColor; <NEWLINE>  <NEWLINE> InitializeModesCombo(); <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> _syncWithAndroidItem.Visible = true; <NEWLINE> _originalActorFont = _actorLabel.Font; <NEWLINE> _originalActorText = _actorLabel.Text; <NEWLINE> _toolStrip.Renderer = new ToolStripColorArrowRenderer(); <NEWLINE> _multiVoicePanel.MouseLeave += MultiVoicePanelOnMouseTransition; <NEWLINE> _multiVoicePanel.MouseEnter += MultiVoicePanelOnMouseTransition; <NEWLINE> foreach (Control c in _multiVoicePanel.Controls) <NEWLINE> { <NEWLINE> c.MouseEnter += MultiVoicePanelOnMouseTransition; <NEWLINE> c.MouseLeave += MultiVoicePanelOnMouseTransition; <NEWLINE> } <NEWLINE> _multiVoicePanel.Paint += (sender, e) => <NEWLINE> { <NEWLINE> if (_mouseInMultiVoicePanel && !Controls.OfType<ActorCharacterChooser>().Any()) <NEWLINE> { <NEWLINE> var borderRect = _multiVoicePanel.ClientRectangle; <NEWLINE>  <NEWLINE> borderRect = new Rectangle(borderRect.Left + 18, borderRect.Top, borderRect.Width - 43, borderRect.Height); <NEWLINE> ControlPaint.DrawBorder(e.Graphics, borderRect, AppPallette.FaintScriptFocusTextColor, <NEWLINE> ButtonBorderStyle.Solid); <NEWLINE> } <NEWLINE> }; <NEWLINE> _multiVoicePanel.Click += _actorCharacterButton_Click; <NEWLINE> } <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> private void MultiVoicePanelOnMouseTransition(object sender1, EventArgs eventArgs) <NEWLINE> { <NEWLINE> bool isMouseInMVP = _multiVoicePanel.ClientRectangle.Contains(_multiVoicePanel.PointToClient(Control.MousePosition)); <NEWLINE> if (isMouseInMVP != _mouseInMultiVoicePanel) <NEWLINE> { <NEWLINE> _mouseInMultiVoicePanel = isMouseInMVP; <NEWLINE> _multiVoicePanel.Invalidate(); <NEWLINE> } <NEWLINE> } <NEWLINE>  <NEWLINE> public Project Project { get; private set; } <NEWLINE>  <NEWLINE> private void OnChooseProject(object sender, EventArgs e) <NEWLINE> { <NEWLINE> ChooseProject(); <NEWLINE> } <NEWLINE>  <NEWLINE> private bool ChooseProject() <NEWLINE> { <NEWLINE> using (var dlg = new ChooseProject()) <NEWLINE> { <NEWLINE> if (DialogResult.OK == dlg.ShowDialog()) <NEWLINE> { <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> Settings.Default.Book = -1; <NEWLINE> Settings.Default.Chapter = -1; <NEWLINE> Settings.Default.Block = -1; <NEWLINE> LoadProject(dlg.SelectedProject); <NEWLINE> return true; <NEWLINE> } <NEWLINE> return false; <NEWLINE> } <NEWLINE> } <NEWLINE>  <NEWLINE> protected override void OnLoad(EventArgs e) <NEWLINE> { <NEWLINE> base.OnLoad(e); <NEWLINE> bool loaded = false; <NEWLINE> if (!string.IsNullOrEmpty(Settings.Default.Project)) <NEWLINE> { <NEWLINE> loaded = LoadProject(Settings.Default.Project); <NEWLINE> } <NEWLINE>  <NEWLINE> if (!loaded)  <NEWLINE> { <NEWLINE> if (!ChooseProject()) <NEWLINE> { <NEWLINE> Close(); <NEWLINE> return; <NEWLINE> } <NEWLINE> } <NEWLINE>  <NEWLINE> var savedBounds = Settings.Default.RestoreBounds; <NEWLINE> if ((savedBounds.Width > MinimumSize.Width) && (savedBounds.Height > MinimumSize.Height) && (IsOnScreen(savedBounds))) <NEWLINE> { <NEWLINE> StartPosition = FormStartPosition.Manual; <NEWLINE> WindowState = FormWindowState.Normal; <NEWLINE> Bounds = savedBounds; <NEWLINE> } <NEWLINE> else <NEWLINE> { <NEWLINE> StartPosition = FormStartPosition.CenterScreen; <NEWLINE> WindowState = FormWindowState.Maximized; <NEWLINE> } <NEWLINE>  <NEWLINE> UpdateChecker = new Sparkle(@""http: <NEWLINE> Icon); <NEWLINE>  <NEWLINE>  <NEWLINE> UpdateChecker.CheckOnFirstApplicationIdle(); <NEWLINE> } <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> private static bool IsOnScreen(Rectangle rect) <NEWLINE> { <NEWLINE> var screens = Screen.AllScreens; <NEWLINE> var formTopLeft = new Rectangle(rect.Left, rect.Top, 100, 100); <NEWLINE>  <NEWLINE> return screens.Any(screen => screen.WorkingArea.Contains(formTopLeft)); <NEWLINE> } <NEWLINE>  <NEWLINE> private void SetupUILanguageMenu() <NEWLINE> { <NEWLINE> _uiLanguageMenu.DropDownItems.Clear(); <NEWLINE> foreach (var lang in LocalizationManager.GetUILanguages(true)) <NEWLINE> { <NEWLINE> var item = _uiLanguageMenu.DropDownItems.Add(lang.NativeName); <NEWLINE> item.Tag = lang; <NEWLINE> item.Click += ((a, b) => <NEWLINE> { <NEWLINE> LocalizationManager.SetUILanguage(((CultureInfo) item.Tag).IetfLanguageTag, true); <NEWLINE> Settings.Default.UserInterfaceLanguage = ((CultureInfo) item.Tag).IetfLanguageTag; <NEWLINE> item.Select(); <NEWLINE> _uiLanguageMenu.Text = ((CultureInfo) item.Tag).NativeName; <NEWLINE> }); <NEWLINE> if (((CultureInfo) item.Tag).IetfLanguageTag == Settings.Default.UserInterfaceLanguage) <NEWLINE> { <NEWLINE> _uiLanguageMenu.Text = ((CultureInfo) item.Tag).NativeName; <NEWLINE> } <NEWLINE> } <NEWLINE>  <NEWLINE> _uiLanguageMenu.DropDownItems.Add(new ToolStripSeparator()); <NEWLINE> var menu = _uiLanguageMenu.DropDownItems.Add(LocalizationManager.GetString(""MainWindow.MoreMenuItem"", <NEWLINE> ""More..."", ""Last item in menu of UI languages"")); <NEWLINE> menu.Click += ((a, b) => <NEWLINE> { <NEWLINE> Program.LocalizationManager.ShowLocalizationDialogBox(false); <NEWLINE> SetupUILanguageMenu(); <NEWLINE> }); <NEWLINE> } <NEWLINE>  <NEWLINE> private void InitializeModesCombo() <NEWLINE> { <NEWLINE> _btnMode.DropDownItems.Clear(); <NEWLINE>  <NEWLINE> _btnMode.Visible = (_btnMode.DropDownItems.Count > 1); <NEWLINE> _recordingToolControl1.HidingSkippedBlocks = Settings.Default.ActiveMode == kNormalRecording; <NEWLINE> } <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> private void OnSaveClick(object sender, EventArgs e) <NEWLINE> { <NEWLINE> MessageBox.Show( <NEWLINE> LocalizationManager.GetString(""MainWindow.SaveAutomatically"", <NEWLINE> ""HearThis automatically saves your work, while you use it. This button is just here to tell you that :-)  To create sound files for playing your recordings, click the Publish button.""), <NEWLINE> LocalizationManager.GetString(""Common.Save"", ""Save"")); <NEWLINE> } <NEWLINE>  <NEWLINE> private void OnPublishClick(object sender, EventArgs e) <NEWLINE> { <NEWLINE> using (var dlg = new PublishDialog(Project)) <NEWLINE> { <NEWLINE> dlg.ShowDialog(); <NEWLINE> } <NEWLINE> } <NEWLINE>  <NEWLINE> private void OnSettingsButtonClicked(object sender, EventArgs e) <NEWLINE> { <NEWLINE> var origBreakQuotesIntoBlocksValue = Settings.Default.BreakQuotesIntoBlocks; <NEWLINE> var origAdditionalBlockBreakChars = Settings.Default.AdditionalBlockBreakCharacters; <NEWLINE> var origBreakAtParagraphBreaks = Project?.ProjectSettings?.BreakAtParagraphBreaks; <NEWLINE> DialogResult result = _settingsProtectionHelper.LaunchSettingsIfAppropriate(() => <NEWLINE> { <NEWLINE> using (var dlg = new AdministrativeSettings(Project)) <NEWLINE> { <NEWLINE> return dlg.ShowDialog(FindForm()); <NEWLINE> } <NEWLINE> }); <NEWLINE> if (result == DialogResult.OK) <NEWLINE> { <NEWLINE> if (origBreakQuotesIntoBlocksValue != Settings.Default.BreakQuotesIntoBlocks || <NEWLINE> origAdditionalBlockBreakChars != Settings.Default.AdditionalBlockBreakCharacters || <NEWLINE> origBreakAtParagraphBreaks != Project?.ProjectSettings?.BreakAtParagraphBreaks) <NEWLINE> { <NEWLINE> LoadProject(Settings.Default.Project); <NEWLINE> } <NEWLINE> else <NEWLINE> { <NEWLINE> ScriptControl.ScriptBlockPainter.SetClauseSeparators(); <NEWLINE>  <NEWLINE> } <NEWLINE> } <NEWLINE> } <NEWLINE>  <NEWLINE> private void OnAboutClick(object sender, EventArgs e) <NEWLINE> { <NEWLINE> using (var dlg = new SILAboutBox(FileLocator.GetFileDistributedWithApplication(""aboutbox.htm""))) <NEWLINE> { <NEWLINE> dlg.CheckForUpdatesClicked += HandleAboutDialogCheckForUpdatesClick; <NEWLINE> dlg.ReleaseNotesClicked += HandleAboutDialogReleaseNotesClicked; <NEWLINE> dlg.ShowDialog(); <NEWLINE> } <NEWLINE> } <NEWLINE>  <NEWLINE> private void HandleAboutDialogReleaseNotesClicked(object sender, EventArgs e) <NEWLINE> { <NEWLINE> var path = FileLocator.GetFileDistributedWithApplication(""ReleaseNotes.md""); <NEWLINE> using (var dlg = new ShowReleaseNotesDialog(((Form)sender).Icon, path)) <NEWLINE> dlg.ShowDialog(); <NEWLINE> } <NEWLINE>  <NEWLINE> private void HandleAboutDialogCheckForUpdatesClick(object sender, EventArgs e) <NEWLINE> { <NEWLINE> var updateStatus = UpdateChecker.CheckForUpdatesAtUserRequest(); <NEWLINE> if (updateStatus == Sparkle.UpdateStatus.UpdateNotAvailable) <NEWLINE> ((SILAboutBox)sender).NotifyNoUpdatesAvailable(); <NEWLINE> } <NEWLINE>  <NEWLINE> protected override void OnClosing(CancelEventArgs e) <NEWLINE> { <NEWLINE> base.OnClosing(e); <NEWLINE> Settings.Default.Save(); <NEWLINE> } <NEWLINE>  <NEWLINE> protected override void OnActivated(EventArgs e) <NEWLINE> { <NEWLINE> base.OnActivated(e); <NEWLINE> _recordingToolControl1.StartFilteringMessages(); <NEWLINE> } <NEWLINE>  <NEWLINE> protected override void OnDeactivate(EventArgs e) <NEWLINE> { <NEWLINE> base.OnDeactivate(e); <NEWLINE> _recordingToolControl1.StopFilteringMessages(); <NEWLINE> } <NEWLINE>  <NEWLINE> private bool LoadProject(string name) <NEWLINE> { <NEWLINE> try <NEWLINE> { <NEWLINE> _projectNameToShow = name; <NEWLINE> ScriptProviderBase scriptProvider; <NEWLINE> if (name == SampleScriptProvider.kProjectUiName) <NEWLINE> scriptProvider = new SampleScriptProvider(); <NEWLINE> else if (Path.GetExtension(name) == MultiVoiceScriptProvider.MultiVoiceFileExtension) <NEWLINE> { <NEWLINE> if (Settings.Default.Project != name) <NEWLINE> { <NEWLINE>  <NEWLINE> Settings.Default.Actor = Settings.Default.Character = null; <NEWLINE> } <NEWLINE> var mvScriptProvider = MultiVoiceScriptProvider.Load(name); <NEWLINE> scriptProvider = mvScriptProvider; <NEWLINE> mvScriptProvider.RestrictToCharacter(Settings.Default.Actor, Settings.Default.Character); <NEWLINE> _multiVoicePanel.Visible = true; <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> _multiVoicePanel.BringToFront(); <NEWLINE> _recordingToolControl1.BringToFront(); <NEWLINE> UpdateActorCharacter(mvScriptProvider, true); <NEWLINE> } <NEWLINE> else if (Path.GetExtension(name) == ExistingProjectsList.kProjectFileExtension || <NEWLINE> Path.GetExtension(name) == "".zip"") <NEWLINE> { <NEWLINE> TextBundle<DblTextMetadata<DblMetadataLanguage>, DblMetadataLanguage> bundle; <NEWLINE> try <NEWLINE> { <NEWLINE> bundle = new TextBundle<DblTextMetadata<DblMetadataLanguage>, DblMetadataLanguage>(name); <NEWLINE> } <NEWLINE> catch (Exception e) <NEWLINE> { <NEWLINE> ErrorReport.NotifyUserOfProblem(e, <NEWLINE> LocalizationManager.GetString(""MainWindow.ProjectMetadataInvalid"", ""Project could not be loaded: {0}""), name); <NEWLINE> return false; <NEWLINE> } <NEWLINE> var metadata = bundle.Metadata; <NEWLINE>  <NEWLINE> var hearThisProjectFolder = Path.Combine(Program.ApplicationDataBaseFolder, metadata.Language.Iso + ""_"" + metadata.Name); <NEWLINE>  <NEWLINE> if (Path.GetExtension(name) == "".zip"" || Path.GetDirectoryName(name) != hearThisProjectFolder) <NEWLINE> { <NEWLINE> var projectFile = Path.Combine(hearThisProjectFolder, Path.ChangeExtension(Path.GetFileName(name), ExistingProjectsList.kProjectFileExtension)); <NEWLINE> if (Directory.Exists(hearThisProjectFolder)) <NEWLINE> { <NEWLINE> if (File.Exists(projectFile)) <NEWLINE> { <NEWLINE>  <NEWLINE> return false; <NEWLINE> } <NEWLINE> } <NEWLINE> else <NEWLINE> Directory.CreateDirectory(hearThisProjectFolder); <NEWLINE> File.Copy(name, projectFile); <NEWLINE> name = projectFile; <NEWLINE> bundle = new TextBundle<DblTextMetadata<DblMetadataLanguage>, DblMetadataLanguage>(name); <NEWLINE> } <NEWLINE> scriptProvider = new ParatextScriptProvider(new TextBundleScripture(bundle)); <NEWLINE> _projectNameToShow = metadata.Name; <NEWLINE> } <NEWLINE> else <NEWLINE> { <NEWLINE> ScrText paratextProject = ScrTextCollection.Get(name); <NEWLINE> if (paratextProject == null) <NEWLINE> return false; <NEWLINE> _projectNameToShow = paratextProject.JoinedNameAndFullName; <NEWLINE> scriptProvider = new ParatextScriptProvider(new ParatextScripture(paratextProject)); <NEWLINE> } <NEWLINE> if (!(scriptProvider is IActorCharacterProvider)) <NEWLINE> { <NEWLINE>  <NEWLINE> _recordingToolControl1.BringToFront(); <NEWLINE> } <NEWLINE>  <NEWLINE> Project = new Project(scriptProvider); <NEWLINE> if (Project.ActorCharacterProvider == null) <NEWLINE> { <NEWLINE> _multiVoicePanel.Hide();  <NEWLINE> } <NEWLINE> if (OnProjectChanged != null) <NEWLINE> OnProjectChanged(this, new EventArgs()); <NEWLINE> SetWindowText(); <NEWLINE>  <NEWLINE> Settings.Default.Project = name; <NEWLINE> Settings.Default.Save(); <NEWLINE> _recordingToolControl1.AdjustMinimumSize(); <NEWLINE>  <NEWLINE> MinimumSize = new Size(MinimumSize.Width, Height - (_recordingToolControl1.Height - _recordingToolControl1.MinimumSize.Height)); <NEWLINE> return true; <NEWLINE> } <NEWLINE> catch (Exception e) <NEWLINE> { <NEWLINE> ErrorReport.NotifyUserOfProblem(e, ""Could not open "" + name); <NEWLINE> } <NEWLINE> return false;  <NEWLINE> } <NEWLINE>  <NEWLINE> private void SetWindowText() <NEWLINE> { <NEWLINE> var ver = Assembly.GetExecutingAssembly().GetName().Version; <NEWLINE>  <NEWLINE> } <NEWLINE>  <NEWLINE> private void ModeDropDownItemClicked(object sender, ToolStripItemClickedEventArgs e) <NEWLINE> { <NEWLINE>  <NEWLINE> } <NEWLINE>  <NEWLINE> private void _syncWithAndroidItem_Click(object sender, EventArgs e) <NEWLINE> { <NEWLINE> AndroidSynchronization.DoAndroidSync(Project); <NEWLINE> } <NEWLINE> private void Shell_ResizeEnd(object sender, EventArgs e) <NEWLINE> { <NEWLINE> if (WindowState != FormWindowState.Normal) <NEWLINE> return; <NEWLINE>  <NEWLINE> Settings.Default.RestoreBounds = new Rectangle(Left, Top, Width, Height); <NEWLINE> Settings.Default.Save(); <NEWLINE> } <NEWLINE>  <NEWLINE> private string _previousActor; <NEWLINE> private string _previousCharacter; <NEWLINE>  <NEWLINE> private void _actorCharacterButton_Click(object sender, EventArgs e) <NEWLINE> { <NEWLINE> var chooser = new ActorCharacterChooser(); <NEWLINE> _previousActor = Project.ActorCharacterProvider.Actor; <NEWLINE> _previousCharacter = Project.ActorCharacterProvider.Character; <NEWLINE> chooser.ActorCharacterProvider = Project.ActorCharacterProvider; <NEWLINE> chooser.Location = new Point(_actorCharacterButton.Left, _multiVoicePanel.Top); <NEWLINE> chooser.Closed += (o, args) => <NEWLINE> { <NEWLINE> UpdateActorCharacter(Project.ActorCharacterProvider, false); <NEWLINE>  <NEWLINE> MultiVoicePanelOnMouseTransition(null, null); <NEWLINE>  <NEWLINE>  <NEWLINE> _multiVoicePanel.Invalidate(); <NEWLINE> }; <NEWLINE> this.Controls.Add(chooser); <NEWLINE> chooser.BringToFront(); <NEWLINE>  <NEWLINE> _multiVoicePanel.Invalidate(); <NEWLINE> } <NEWLINE>  <NEWLINE> private string _originalCurrentActorItemText; <NEWLINE>  <NEWLINE> private void UpdateActorCharacter(IActorCharacterProvider provider, bool initializing) <NEWLINE> { <NEWLINE> if (_originalCurrentActorItemText == null) <NEWLINE> _originalCurrentActorItemText = _limitToCurrentActorItem.Text; <NEWLINE> if (!initializing && _previousActor == provider.Actor && _previousCharacter == provider.Character) <NEWLINE> return;  <NEWLINE> if (string.IsNullOrEmpty(provider.Actor)) <NEWLINE> { <NEWLINE> _actorLabel.Text = _originalActorText; <NEWLINE> _characterLabel.Text = """"; <NEWLINE> _actorLabel.Font = new Font(_originalActorFont.FontFamily, 32.0f); <NEWLINE> _limitToCurrentActorItem.Visible = false; <NEWLINE> } <NEWLINE> else <NEWLINE> { <NEWLINE> _actorLabel.Text = provider.Actor; <NEWLINE> _characterLabel.Text = provider.Character; <NEWLINE> _actorLabel.Font = _originalActorFont; <NEWLINE> _limitToCurrentActorItem.Visible = true; <NEWLINE> _limitToCurrentActorItem.Text = string.Format(_originalCurrentActorItemText, provider.Actor); <NEWLINE> } <NEWLINE>  <NEWLINE>  <NEWLINE> if (!initializing) <NEWLINE> _recordingToolControl1.UpdateForActorCharacter(); <NEWLINE> } <NEWLINE>  <NEWLINE> private void _actorLabel_Click(object sender, EventArgs e) <NEWLINE> { <NEWLINE> _actorCharacterButton_Click(sender, e); <NEWLINE> } <NEWLINE>  <NEWLINE> private void _characterLabel_Click(object sender, EventArgs e) <NEWLINE> { <NEWLINE> _actorCharacterButton_Click(sender, e); <NEWLINE> } <NEWLINE>  <NEWLINE> private void _saveHearthisPackItem_Click(object sender, EventArgs e) <NEWLINE> { <NEWLINE> var dlg = new SaveFileDialog(); <NEWLINE> dlg.Filter = HearThisPackFilter; <NEWLINE> dlg.RestoreDirectory = true; <NEWLINE> if (dlg.ShowDialog() != DialogResult.OK || string.IsNullOrEmpty(dlg.FileName)) <NEWLINE> return; <NEWLINE> var packer = new HearThisPackMaker(Project.ProjectFolder); <NEWLINE> if (_limitToCurrentActorItem.Checked && Project.ActorCharacterProvider != null) <NEWLINE> packer.Actor = Project.ActorCharacterProvider.Actor; <NEWLINE> var progressDlg = new MergeProgressDialog(); <NEWLINE>  <NEWLINE> progressDlg.Closed += (o, args) => progressDlg.Dispose(); <NEWLINE> progressDlg.SetSource(Path.GetFileName(dlg.FileName)); <NEWLINE> progressDlg.Show(this); <NEWLINE>  <NEWLINE>  <NEWLINE> progressDlg.SetLabel(string.Format(LocalizationManager.GetString(""MainWindow.SavingTo"", ""Saving to {0}"", ""Keep {0} as a placeholder for the file name"") <NEWLINE> , Path.GetFileName(dlg.FileName))); <NEWLINE> progressDlg.Text = string.Format(LocalizationManager.GetString(""MainWindow.SavingHearThisPack"", ""Saving {0}"", ""{0} will be the file extension, HearThisPack""), ""HearThisPack""); <NEWLINE> packer.Pack(dlg.FileName, progressDlg.LogBox); <NEWLINE> progressDlg.LogBox.WriteMessage(string.Format(LocalizationManager.GetString(""MainWindow.PackComplete"", ""{0} is complete--click OK to close this window""), ""HearThisPack"")); <NEWLINE> progressDlg.SetDone(); <NEWLINE> } <NEWLINE>  <NEWLINE> private static string HearThisPackFilter => @""HearThisPack files (*"" + HearThisPackMaker.HearThisPackExtension + @"")|*"" + <NEWLINE> HearThisPackMaker.HearThisPackExtension; <NEWLINE>  <NEWLINE> private void _mergeHearthisPackItem_Click(object sender, EventArgs e) <NEWLINE> { <NEWLINE> var dlg = new OpenFileDialog(); <NEWLINE> dlg.Filter = HearThisPackFilter; <NEWLINE> dlg.RestoreDirectory = true; <NEWLINE> dlg.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments); <NEWLINE> if (dlg.ShowDialog() != DialogResult.OK) <NEWLINE> return; <NEWLINE> using (var reader = new HearThisPackReader(dlg.FileName)) <NEWLINE> { <NEWLINE> if (reader.ProjectName.ToLowerInvariant() != Project.Name.ToLowerInvariant()) <NEWLINE> { <NEWLINE> var msg = LocalizationManager.GetString(""MainWindow.MergeNoData"", <NEWLINE> ""This HearThis pack does not have any data for {0}. It contains data for {1}. If you want to merge it please open that project."", <NEWLINE> ""Keep {0} as a placeholder for the current project name, {1} for the project in the file""); <NEWLINE> MessageBox.Show(this, <NEWLINE> string.Format(msg, Project.Name, reader.ProjectName), <NEWLINE> LocalizationManager.GetString(""MainWindow.MergeWrongProject"", ""Wrong Project""), <NEWLINE> MessageBoxButtons.OK, <NEWLINE> MessageBoxIcon.Warning); <NEWLINE> return; <NEWLINE> } <NEWLINE> var packLink = reader.GetLink(); <NEWLINE> var ourLink = new WindowsLink(Program.ApplicationDataBaseFolder); <NEWLINE> var merger = new RepoMerger(Project, ourLink, packLink); <NEWLINE> merger.SendData = false;  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> var progressDlg = new MergeProgressDialog(); <NEWLINE> progressDlg.Closed += (o, args) => progressDlg.Dispose(); <NEWLINE> progressDlg.SetLabel(Path.GetFileName(dlg.FileName)); <NEWLINE> progressDlg.Show(this); <NEWLINE> merger.Merge(progressDlg.LogBox); <NEWLINE> _recordingToolControl1.UpdateAfterMerge(); <NEWLINE> progressDlg.LogBox.WriteMessage(LocalizationManager.GetString(""MergeProgressDialog.MergeComplete"", ""Merge is complete--click OK to close this window"")); <NEWLINE> progressDlg.SetDone(); <NEWLINE> } <NEWLINE> } <NEWLINE>  <NEWLINE> private void supportToolStripMenuItem_Click(object sender, EventArgs e) <NEWLINE> { <NEWLINE> Process.Start(@""https: <NEWLINE> } <NEWLINE> } <NEWLINE> } <NEWLINE> "
"protected virtual void Write(IGTFSTargetFile levelsFile, IEnumerable<Level> levels) <NEWLINE> { <NEWLINE> if (levelsFile == null) return; <NEWLINE>  <NEWLINE> bool initialized = false; <NEWLINE> var data = new string[3]; <NEWLINE> foreach (var level in levels) <NEWLINE> { <NEWLINE> if (!initialized) <NEWLINE> { <NEWLINE> if (levelsFile.Exists) <NEWLINE> { <NEWLINE> levelsFile.Clear(); <NEWLINE> } <NEWLINE>  <NEWLINE>  <NEWLINE> data[0] = ""level_id""; <NEWLINE> data[1] = ""level_index""; <NEWLINE> data[2] = ""level_name""; <NEWLINE> levelsFile.Write(data); <NEWLINE> initialized = true; <NEWLINE> }"
" <NEWLINE> public bool IsEmpty => this == Empty; <NEWLINE>  <NEWLINE>  <NEWLINE> public virtual int Count() => 0; <NEWLINE>  <NEWLINE> internal virtual bool MayTurnToBranch2 => false; <NEWLINE>  <NEWLINE> internal virtual Entry GetMinHashEntryOrDefault() => null; <NEWLINE> internal virtual Entry GetMaxHashEntryOrDefault() => null; <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> internal virtual Entry GetEntryOrNull(int hash) => null;"
" <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> public void AddCell(Cell cell) <NEWLINE> { <NEWLINE> ActualGeneration.SetValue(cell, cell.X, cell.Y); <NEWLINE> }"
" <NEWLINE> public string Name <NEWLINE> { <NEWLINE> get <NEWLINE> { <NEWLINE> return this.loggerName; <NEWLINE> } <NEWLINE> } <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> public LogLevel Level <NEWLINE> { <NEWLINE> get <NEWLINE> { <NEWLINE> return this.logLevel; <NEWLINE> } <NEWLINE> set <NEWLINE> { <NEWLINE> this.logLevel = value; <NEWLINE> } <NEWLINE> }"
"static void ThrowInvalidOperationException(string message) => throw new InvalidOperationException(message); <NEWLINE> "
" <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> public Line(Scintilla scintilla, int index) <NEWLINE> { <NEWLINE> this.scintilla = scintilla; <NEWLINE> Index = index; <NEWLINE> }"
" <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> public static bool ContainsEx(this string source, StringComparison comparisonType, params char[] targets) <NEWLINE> { <NEWLINE> try <NEWLINE> { <NEWLINE> var r = targets.Any(x => source.IndexOf(x.ToString(), 0, comparisonType) != -1); <NEWLINE> return r; <NEWLINE> } <NEWLINE> catch <NEWLINE> { <NEWLINE> return false; <NEWLINE> } <NEWLINE> } <NEWLINE> "
"public interface ICommandExtension { <NEWLINE> ICommand Command { get; set; } <NEWLINE> } <NEWLINE> "
"string[] dirs = { ""data"", ""foreign_keys"", ""functions"", <NEWLINE> ""indexes"", ""procs"", ""tables"", ""triggers"" }; <NEWLINE> foreach (string dir in dirs) { <NEWLINE> if (!Directory.Exists(args[2] + ""/"" + dir)) { <NEWLINE> Directory.CreateDirectory(args[2] + ""/"" + dir); <NEWLINE> } <NEWLINE> }"
"var RunProcess = new Action<FilePath, ProcessSettings> ((process, settings) => <NEWLINE> { <NEWLINE> var result = StartProcess(process, settings); <NEWLINE> if (result != 0) { <NEWLINE> throw new Exception (""Process '"" + process + ""' failed with error: "" + result); <NEWLINE> } <NEWLINE> }); <NEWLINE> "
"private static void PrintRegexMatch(Match m) <NEWLINE> { <NEWLINE> var matchCount = 0; <NEWLINE> while (m.Success) <NEWLINE> { <NEWLINE> Console.WriteLine(""Match"" + (++matchCount)); <NEWLINE> for (int i = 1; i <= 2; i++) <NEWLINE> { <NEWLINE> var g = m.Groups[i]; <NEWLINE> Console.WriteLine(""Group"" + i + ""='"" + g + ""'""); <NEWLINE>  <NEWLINE> var cc = g.Captures; <NEWLINE> for (int j = 0; j < cc.Count; j++) <NEWLINE> { <NEWLINE> var c = cc[j]; <NEWLINE> Console.WriteLine(""Capture"" + j + ""='"" + c + ""', Position="" + c.Index); <NEWLINE> } <NEWLINE> } <NEWLINE> m = m.NextMatch(); <NEWLINE> } <NEWLINE> } <NEWLINE> "
"public override bool InfoBoxCameraVisible (ViewContext context)  { <NEWLINE> return VisibilityForContext (context, ""infobox"", ""camera"", false); <NEWLINE> } <NEWLINE> "
"private bool GestureMagnify(IMouseDevice device, ulong timestamp, IInputRoot root, Point p, <NEWLINE> PointerPointProperties props, Vector delta, KeyModifiers inputModifiers) <NEWLINE> { <NEWLINE> device = device ?? throw new ArgumentNullException(nameof(device)); <NEWLINE> root = root ?? throw new ArgumentNullException(nameof(root)); <NEWLINE>  <NEWLINE> var hit = HitTest(root, p); <NEWLINE>  <NEWLINE> if (hit != null) <NEWLINE> { <NEWLINE> var source = GetSource(hit); <NEWLINE> var e = new PointerDeltaEventArgs(Gestures.PointerTouchPadGestureMagnifyEvent, source, <NEWLINE> _pointer, root, p, timestamp, props, inputModifiers, delta); <NEWLINE>  <NEWLINE> source?.RaiseEvent(e); <NEWLINE> return e.Handled; <NEWLINE> } <NEWLINE>  <NEWLINE> return false; <NEWLINE> }"
" <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> public LanguageType Type { get; } <NEWLINE>  <NEWLINE> internal Orthography Orthography { get; } <NEWLINE> internal Morphotactics Morphotactics { get; } <NEWLINE>  <NEWLINE> internal MorphemeContainer<Suffix> Suffixes { get; } <NEWLINE> internal MorphemeContainer<Root> Roots { get; } <NEWLINE>  <NEWLINE> private WordAnalyzer Analyzer { get; }"
" <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> [ContractAnnotation(""=> halt"")] <NEWLINE> public static void Fail(string text) <NEWLINE> { <NEWLINE> throw new Exception(text); <NEWLINE> }"
" <NEWLINE>  <NEWLINE>  <NEWLINE> public const int MaxServiceNameLength = 256; <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> public const int MaxMethodNameLength = 256; <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> public const int MaxParametersLength = 1024; <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> public const int MaxClientIpAddressLength = 64; <NEWLINE> "
" <NEWLINE>  <NEWLINE>  <NEWLINE> using System; <NEWLINE> using System.Linq; <NEWLINE> using System.Reactive.Linq; <NEWLINE> using Avalonia.Controls.Notifications; <NEWLINE> using Avalonia.Controls.Primitives; <NEWLINE> using Avalonia.Input; <NEWLINE> using Avalonia.Input.Raw; <NEWLINE> using Avalonia.Layout; <NEWLINE> using Avalonia.Logging; <NEWLINE> using Avalonia.LogicalTree; <NEWLINE> using Avalonia.Platform; <NEWLINE> using Avalonia.Rendering; <NEWLINE> using Avalonia.Styling; <NEWLINE> using Avalonia.Utilities; <NEWLINE> using Avalonia.VisualTree; <NEWLINE> using JetBrains.Annotations;"
" <NEWLINE>  <NEWLINE>  <NEWLINE> using System; <NEWLINE> using System.Linq; <NEWLINE> using Avalonia.Logging; <NEWLINE> using Avalonia.VisualTree; <NEWLINE>  <NEWLINE> namespace Avalonia.Layout <NEWLINE> { <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> public enum HorizontalAlignment <NEWLINE> { <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> Stretch, <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> Left, <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> Center, <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> Right, <NEWLINE> } <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> public enum VerticalAlignment <NEWLINE> { <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> Stretch, <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> Top, <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> Center, <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> Bottom, <NEWLINE> } <NEWLINE>  <NEWLINE> } <NEWLINE> "
""
"public static void nullLoader() <NEWLINE> { <NEWLINE> modelHeaders = null; <NEWLINE> aBooleanArray1663 = null; <NEWLINE> aBooleanArray1664 = null; <NEWLINE> anIntArray1665 = null; <NEWLINE> anIntArray1666 = null; <NEWLINE> anIntArray1667 = null; <NEWLINE> anIntArray1668 = null; <NEWLINE> anIntArray1669 = null; <NEWLINE> anIntArray1670 = null; <NEWLINE> anIntArray1671 = null; <NEWLINE> anIntArrayArray1672 = null; <NEWLINE> anIntArray1673 = null; <NEWLINE> anIntArrayArray1674 = null; <NEWLINE> anIntArray1675 = null; <NEWLINE> anIntArray1676 = null; <NEWLINE> anIntArray1677 = null; <NEWLINE> SINE = null; <NEWLINE> COSINE = null; <NEWLINE> HSLtoRGB = null; <NEWLINE> modelIntArray4 = null; <NEWLINE> }"
" <NEWLINE> using System.Reflection; <NEWLINE> using System.Runtime.CompilerServices; <NEWLINE> using System.Runtime.InteropServices;"
" <NEWLINE>  <NEWLINE>  <NEWLINE> protected double AddedTime; <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> protected int CurrentFrameIndexValue; <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> protected float TimePerFrame;"
""
"while (index.ContainsKey(sfmId))  <NEWLINE> { <NEWLINE> ++homograph; <NEWLINE> sfmId = adaptedEntry.SfmID + ""_"" + homograph; <NEWLINE> }"
"private readonly string _tempFolder; <NEWLINE> private long _cachedAssembliesHash = -1; <NEWLINE> private long _currentAssembliesHash = -1;"
" <NEWLINE> var result = ""Apps (exluding this):""; <NEWLINE> result += Environment.NewLine + apps; <NEWLINE> result += Environment.NewLine + Environment.NewLine + ""Tables:""; <NEWLINE> result += Environment.NewLine + tables; <NEWLINE> result += Environment.NewLine + Environment.NewLine + ""Columns:""; <NEWLINE> result += Environment.NewLine + columns;"
" <NEWLINE> for (var i = 0; i < message.Length; i += 3000) <NEWLINE> { <NEWLINE> var length = Math.Min(3000, message.Length - i); <NEWLINE> var part = message.Substring(i, length); <NEWLINE> if (parts.Count > 0) <NEWLINE> { <NEWLINE> part = ""(Truncated message continued) "" + part; <NEWLINE> } <NEWLINE> parts.Add(part); <NEWLINE> }"
"private static Stopwatch timer; <NEWLINE> private static long lastMillis; <NEWLINE> private static ulong nodeCounter; <NEWLINE> private static string outputFormat;"
""
"protected override void ApplyNormalVisibilityState(DrawableHitObject hitObject, ArmedState state) <NEWLINE> { <NEWLINE> applyState(hitObject, false); <NEWLINE> } <NEWLINE> "
" <NEWLINE>  <NEWLINE>  <NEWLINE> using System; <NEWLINE> using System.Linq; <NEWLINE> using osu.Framework.Bindables; <NEWLINE> using osu.Game.Beatmaps; <NEWLINE> using osu.Game.Configuration; <NEWLINE> using osu.Game.Rulesets.Mods; <NEWLINE> using osu.Game.Rulesets.Objects; <NEWLINE> using osu.Game.Rulesets.Osu.Objects; <NEWLINE> using osu.Game.Rulesets.Osu.UI; <NEWLINE> using osuTK; <NEWLINE>  <NEWLINE> namespace osu.Game.Rulesets.Osu.Mods <NEWLINE> { <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> public class OsuModRandom : ModRandom, IApplicableToBeatmap <NEWLINE> { <NEWLINE>  <NEWLINE> } <NEWLINE> } <NEWLINE> "
"private readonly Texture texture; <NEWLINE>  <NEWLINE> public Triangles() <NEWLINE> { <NEWLINE> texture = Texture.WhitePixel; <NEWLINE> }"
"protected readonly TriangleButton DeselectAllButton; <NEWLINE> protected readonly TriangleButton CustomiseButton; <NEWLINE> protected readonly TriangleButton CloseButton;"
"public void SetIcon(Drawable icon) <NEWLINE> { <NEWLINE> IconContainer.Icon = icon; <NEWLINE> IconContainer.Show(); <NEWLINE> } <NEWLINE> "
" <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> private const double time_span_default = 1500; <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> private const double time_span_min = 50; <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> private const double time_span_max = 10000; <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> private const double time_span_step = 50; <NEWLINE> "
"protected override void OnUserScroll(float value, bool animated = true, double? distanceDecay = default) <NEWLINE> { <NEWLINE> UserScrolling = true; <NEWLINE> base.OnUserScroll(value, animated, distanceDecay); <NEWLINE> }"
"private RegTestFixture RegTestFixture { get; } <NEWLINE>  <NEWLINE> public RegTests(RegTestFixture regTestFixture) <NEWLINE> { <NEWLINE> RegTestFixture = regTestFixture; <NEWLINE> } <NEWLINE> "
public enum TorchDirection <NEWLINE> { <NEWLINE> South = 0x01,  <NEWLINE> North = 0x02, <NEWLINE> West = 0x03, <NEWLINE> East = 0x04, <NEWLINE> Ground = 0x05 <NEWLINE> } <NEWLINE> 
"using System; <NEWLINE> using System.IO; <NEWLINE> using System.Reflection; <NEWLINE> using System.Windows.Media.Imaging; <NEWLINE> using Autodesk.Revit.ApplicationServices; <NEWLINE> using Autodesk.Revit.DB; <NEWLINE> using Autodesk.Revit.UI; <NEWLINE> "
"using System; <NEWLINE> using System.Collections.Generic; <NEWLINE> using System.Linq; <NEWLINE> using System.Text; <NEWLINE>  <NEWLINE> namespace UnanimousOverkillGame <NEWLINE> { <NEWLINE> class CollisionManager <NEWLINE> { <NEWLINE> } <NEWLINE> } <NEWLINE> "
"public OptionsPageGeneral() { <NEWLINE> OutputPane = Resources.ExtensionName; <NEWLINE> MaximumShelvesets = 0; <NEWLINE> ShelvesetName = ""Auto {0}""; <NEWLINE> TimerSaveInterval = 5; <NEWLINE> PauseWhileDebugging = false; <NEWLINE> } <NEWLINE> "
" <NEWLINE> using System; <NEWLINE>  <NEWLINE> namespace SharpPaste <NEWLINE> { <NEWLINE> public class Config <NEWLINE> { <NEWLINE>  <NEWLINE> public static string HOSTINGTYPE = ""ASP.NET""; <NEWLINE> public static string DBPATH = string.Format(@""{0}db\Pastes.db"", AppDomain.CurrentDomain.BaseDirectory); <NEWLINE>  <NEWLINE>  <NEWLINE> public static int TOKENLENGTH = 23; <NEWLINE> } <NEWLINE> } <NEWLINE> "
"public int CurrentTab { <NEWLINE> get { <NEWLINE> return Widget.CurrentPage; <NEWLINE> } <NEWLINE> set { <NEWLINE> Widget.CurrentPage = value; <NEWLINE> } <NEWLINE> }"
"private void MiniForm() <NEWLINE> { <NEWLINE> WindowState = FormWindowState.Minimized; <NEWLINE> }"
"public static String API_Version => ""v1""; <NEWLINE>  <NEWLINE> public static String API_Name => $""Battery Commander {API_Version}""; <NEWLINE>  <NEWLINE> public static String APP_INSIGHTS_KEY = ""66d7081f-e4a1-421f-b57a-38656917ee3d""; <NEWLINE>  <NEWLINE> private static Boolean IsDevelopment;"
""
""
"for (int i = 0; i < players.Length; i ++) <NEWLINE> { <NEWLINE> sb.DrawString(font, ""P"" + (i + 1) + "": "" + players[i].score, temp, Color.White); <NEWLINE> temp.Y += 32; <NEWLINE> }"
"routes.MapRoute(""SecureReceivePack"", ""{project}.git/git-receive-pack"", <NEWLINE> new { controller = ""Git"", action = ""SecureReceivePack"" }, <NEWLINE> new { method = new HttpMethodConstraint(""POST"") });"
"public class CreateSlothTransactionResponse <NEWLINE> { <NEWLINE> public string Id { get; set; } <NEWLINE> }"
"public void Dispose () { <NEWLINE> if (_filePath == null) { <NEWLINE> Debug.Log(""Aborting!""); <NEWLINE> return; <NEWLINE> }"
"using System; <NEWLINE> using System.Collections.Generic; <NEWLINE>  <NEWLINE> namespace ThingFilter <NEWLINE> { <NEWLINE>  <NEWLINE> } <NEWLINE> "
"using System; <NEWLINE> using System.Collections.Generic; <NEWLINE> using System.Linq; <NEWLINE> using System.Text; <NEWLINE> using NUnit.Framework; <NEWLINE> using Abaqus; <NEWLINE> using System.IO; <NEWLINE>  <NEWLINE> namespace UnitTest.ParserTests <NEWLINE> { <NEWLINE> [TestFixture] <NEWLINE> public class ParserTest <NEWLINE> { <NEWLINE> [Test] <NEWLINE> public void DummyTest() <NEWLINE> { <NEWLINE> Assert.True(true); <NEWLINE> } <NEWLINE>  <NEWLINE> } <NEWLINE>  <NEWLINE>  <NEWLINE> } <NEWLINE> "
" <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> using System; <NEWLINE> using System.IO; <NEWLINE> using System.Net; <NEWLINE> using System.Net.Sockets; <NEWLINE>  <NEWLINE> using System.Runtime.InteropServices; <NEWLINE>  <NEWLINE> using Mono.Unix; <NEWLINE> using Mono.Unix.Native; <NEWLINE>  <NEWLINE> namespace NDesk.DBus <NEWLINE> { <NEWLINE> public class UnixSocket <NEWLINE> { <NEWLINE>  <NEWLINE> [DllImport (""libc"")] <NEWLINE> protected static extern int socket (int domain, int type, int protocol); <NEWLINE>  <NEWLINE> } <NEWLINE> } <NEWLINE> "
" <NEWLINE> using System; <NEWLINE> using System.Collections.Generic; <NEWLINE> using System.Diagnostics; <NEWLINE> using System.IO; <NEWLINE> using System.Linq; <NEWLINE> using System.Reflection; <NEWLINE> using System.Windows.Forms; <NEWLINE> using System.Xml.Linq; <NEWLINE> using WaitingLog.Properties; <NEWLINE>  <NEWLINE> namespace WaitingLog <NEWLINE> { <NEWLINE> public partial class FormMain : Form <NEWLINE> { <NEWLINE> public FormMain() <NEWLINE> { <NEWLINE> InitializeComponent(); <NEWLINE> } <NEWLINE>  <NEWLINE> } <NEWLINE> } <NEWLINE> "
class Dead2 { }  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> 
public enum NameType { <NEWLINE> FemaleFirst, <NEWLINE> MaleFirst, <NEWLINE> LastNames, <NEWLINE> MixedFirstNames <NEWLINE> } <NEWLINE>  <NEWLINE> 
"namespace AngleSharp.Core.Tests <NEWLINE> { <NEWLINE> using AngleSharp.Dom; <NEWLINE> using AngleSharp.Extensions; <NEWLINE> using AngleSharp.Html; <NEWLINE> using NUnit.Framework; <NEWLINE> using System; <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> [TestFixture] <NEWLINE> public class UserJsUnsafeTests <NEWLINE> { <NEWLINE>  <NEWLINE> } <NEWLINE> }"
"using System; <NEWLINE> using System.Collections.Generic; <NEWLINE> using System.Linq; <NEWLINE> using System.Text; <NEWLINE> using System.Threading.Tasks; <NEWLINE> using System.Threading; <NEWLINE> using System.Net; <NEWLINE> using System.Net.Sockets; <NEWLINE> using Newtonsoft.Json.Linq; <NEWLINE> using MouseEvent; <NEWLINE> using System.Runtime.InteropServices; <NEWLINE> using System.IO; <NEWLINE> using System.Windows.Media; <NEWLINE> using System.Windows.Controls; <NEWLINE> using System.Windows.Interop; <NEWLINE> using System.Windows; <NEWLINE>  <NEWLINE> namespace DoubleCursor <NEWLINE> { <NEWLINE> class IPC <NEWLINE> { <NEWLINE> LocalIndicator localIndicator; <NEWLINE> RemoteIndicator remoteIndicator; <NEWLINE> LocalCursor localCursor; <NEWLINE> RemoteCursor remoteCursor; <NEWLINE>  <NEWLINE> private static extern void mouse_event(int dwFlags, int dx, int dy, int dwData, int dwExtraInfo); <NEWLINE>  <NEWLINE> } <NEWLINE> } <NEWLINE> "
" <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> using System.Threading; <NEWLINE>  <NEWLINE> namespace Mono.Debugger.Client <NEWLINE> { <NEWLINE> public static class CommandLine <NEWLINE> { <NEWLINE> internal static AutoResetEvent ResumeEvent { get; private set; } <NEWLINE>  <NEWLINE> internal static bool InferiorExecuting { get; set; } <NEWLINE>  <NEWLINE> static CommandLine() <NEWLINE> { <NEWLINE> ResumeEvent = new AutoResetEvent(false); <NEWLINE> } <NEWLINE>  <NEWLINE> internal static void SetControlCHandler() <NEWLINE> { <NEWLINE> } <NEWLINE>  <NEWLINE> internal static void UnsetControlCHandler() <NEWLINE> { <NEWLINE> } <NEWLINE>  <NEWLINE> public static void WaitForSuspend() { <NEWLINE> if (InferiorExecuting) <NEWLINE> { <NEWLINE> ResumeEvent.WaitOne(); <NEWLINE> InferiorExecuting = false; <NEWLINE> } <NEWLINE> } <NEWLINE> } <NEWLINE> } <NEWLINE> "
"if (messageContent.Length == 0) <NEWLINE> { <NEWLINE> return null; <NEWLINE> }"
""
"private class JoystickDevice <NEWLINE> { <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> public const int MAX_AXES = 64; <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> public const int MAX_BUTTONS = 64; <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> public const int MAX_HATS = 4; <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> private const float deadzone_threshold = 0.05f; <NEWLINE> }"
" <NEWLINE>  <NEWLINE>  <NEWLINE> using System; <NEWLINE> using osu.Framework.Graphics; <NEWLINE> using osu.Framework.Graphics.Textures; <NEWLINE> using osu.Framework.Audio.Sample; <NEWLINE> using osu.Framework.Bindables; <NEWLINE> using osu.Game.Rulesets.Scoring; <NEWLINE> using osu.Game.Audio; <NEWLINE> using osu.Game.Beatmaps; <NEWLINE> using osu.Game.Rulesets.Mania.Beatmaps; <NEWLINE> using osu.Game.Skinning; <NEWLINE> using System.Collections.Generic; <NEWLINE>  <NEWLINE> namespace osu.Game.Rulesets.Mania.Skinning <NEWLINE> { <NEWLINE> public class ManiaLegacySkinTransformer : ISkin <NEWLINE> { <NEWLINE> private readonly ISkin source; <NEWLINE> private readonly ManiaBeatmap beatmap; <NEWLINE>  <NEWLINE> } <NEWLINE> } <NEWLINE> "
"protected override Drawable CreateBackground() <NEWLINE> { <NEWLINE> background = base.CreateBackground(); <NEWLINE> background.Width = 2; <NEWLINE> return background; <NEWLINE> }"
"private bool _isLoading; <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> public bool IsLoading { <NEWLINE> get { return _isLoading; } <NEWLINE> internal set { <NEWLINE> _isLoading = value; <NEWLINE> if (PropertyChanged != null) { <NEWLINE> PropertyChanged(this, new PropertyChangedEventArgs(""IsLoading"")); <NEWLINE> } <NEWLINE> } <NEWLINE> }"
"class Program <NEWLINE> { <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> static void Main(string[] args) <NEWLINE> { <NEWLINE> RunTests().Wait(); <NEWLINE> Debug.WriteLine(""All tests executed successfully""); <NEWLINE> } <NEWLINE> }"
"private readonly SemanticModel semanticModel; <NEWLINE> "
"[TempData] <NEWLINE> public string StatusMessage { get; set; }"
""
" <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> public interface IImageVersion <NEWLINE> { <NEWLINE> #region Properties <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> int Width <NEWLINE> { <NEWLINE> get; <NEWLINE> set; <NEWLINE> } <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> int Height <NEWLINE> { <NEWLINE> get; <NEWLINE> set; <NEWLINE> } <NEWLINE> #endregion <NEWLINE> }"
namespace KraxbotOSS <NEWLINE> { <NEWLINE> partial class FormLogin <NEWLINE> { <NEWLINE>  <NEWLINE> } <NEWLINE> } <NEWLINE> 
"private void Dispose(bool disposing) <NEWLINE> { <NEWLINE>  <NEWLINE> if (!disposed) <NEWLINE> { <NEWLINE>  <NEWLINE>  <NEWLINE> if (disposing) <NEWLINE> { <NEWLINE>  <NEWLINE> } <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> NativeMethods.git_revwalk_free(walker); <NEWLINE>  <NEWLINE>  <NEWLINE> disposed = true; <NEWLINE> } <NEWLINE> }"
"[Test] <NEWLINE> public void IsEmpty3() <NEWLINE> { <NEWLINE> IXLWorksheet ws = new XLWorkbook().Worksheets.Add(""Sheet1""); <NEWLINE> IXLCell cell = ws.Cell(1, 1); <NEWLINE> cell.Style.Fill.BackgroundColor = XLColor.Red; <NEWLINE> bool actual = cell.IsEmpty(); <NEWLINE> bool expected = true; <NEWLINE> Assert.AreEqual(expected, actual); <NEWLINE> }"
" <NEWLINE> public string _HTMLContent; <NEWLINE> public string HTMLContent <NEWLINE> { <NEWLINE> get <NEWLINE> { <NEWLINE> return _HTMLContent; <NEWLINE> } <NEWLINE> set <NEWLINE> { <NEWLINE> Set(() => HTMLContent, ref _HTMLContent, value); <NEWLINE>  <NEWLINE> } <NEWLINE> } <NEWLINE> "
"using System; <NEWLINE> using System.Collections.Generic; <NEWLINE> using System.Data; <NEWLINE> using System.Data.SqlClient; <NEWLINE> using System.Linq; <NEWLINE> using System.Net; <NEWLINE> using System.Net.Http; <NEWLINE> using Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling; <NEWLINE> using Stardust.Manager.Extensions; <NEWLINE> using Stardust.Manager.Helpers; <NEWLINE> using Stardust.Manager.Interfaces; <NEWLINE> using Stardust.Manager.Models; <NEWLINE>  <NEWLINE> namespace Stardust.Manager <NEWLINE> { <NEWLINE> public class JobRepository : IJobRepository <NEWLINE> { <NEWLINE> private readonly RetryPolicyProvider _retryPolicyProvider; <NEWLINE> private readonly RetryPolicy _retryPolicy; <NEWLINE> private readonly string _connectionString; <NEWLINE>  <NEWLINE> public JobRepository(string connectionString, RetryPolicyProvider retryPolicyProvider) <NEWLINE> { <NEWLINE> _connectionString = connectionString; <NEWLINE> _retryPolicyProvider = retryPolicyProvider; <NEWLINE> _retryPolicy = retryPolicyProvider.GetPolicy(); <NEWLINE> } <NEWLINE> } <NEWLINE> }"
"delegate void ActionSheetHandler(ActionSheetAction arg0); <NEWLINE>  <NEWLINE> delegate void RippleCompletionBlock(); <NEWLINE>  <NEWLINE> delegate void ActivityIndicatorAnimationHandler(nfloat strokeStart, nfloat strokeEnd); <NEWLINE>  <NEWLINE> delegate void ActionHandler(AlertAction action); <NEWLINE>  <NEWLINE> delegate void FeatureHighlightCompletionHandler(bool accepted); <NEWLINE>  <NEWLINE> delegate void FlexibleHeaderChangeContentInsetsHandler(); <NEWLINE>  <NEWLINE> delegate void FlexibleHeaderShadowIntensityChangeHandler(CALayer shadowLayer, nfloat intensity); <NEWLINE>  <NEWLINE> delegate void InkCompletionHandler(); <NEWLINE>  <NEWLINE> delegate void EnumerateOverlaysHandler(IOverlay overlay, nuint idx, ref bool stop); <NEWLINE>  <NEWLINE> delegate void SnackbarMessageCompletionHandler(bool arg0); <NEWLINE>  <NEWLINE> delegate void SnackbarMessageActionHandler();"
"{ <NEWLINE> timeout = TimeSpan.FromSeconds(100); <NEWLINE> "
"using System.Reflection; <NEWLINE> using System.Runtime.InteropServices; <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> [assembly: AssemblyTitle(""Nowin"")] <NEWLINE> [assembly: AssemblyDescription("""")] <NEWLINE> [assembly: AssemblyConfiguration("""")] <NEWLINE> [assembly: AssemblyCompany(""Boris Letocha"")] <NEWLINE> [assembly: AssemblyProduct(""Nowin"")] <NEWLINE> [assembly: AssemblyCopyright(""Copyright © 2015"")] <NEWLINE> [assembly: AssemblyTrademark("""")] <NEWLINE> [assembly: AssemblyCulture("""")] <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> [assembly: ComVisible(false)] <NEWLINE>  <NEWLINE>  <NEWLINE> [assembly: Guid(""fd085b68-3766-42af-ab6d-351b7741c685"")] <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> [assembly: AssemblyVersion(""0.20.0.0"")] <NEWLINE> [assembly: AssemblyFileVersion(""0.20.0.0"")] <NEWLINE> "
" <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> protected virtual PackageManager CreatePackageManager(IFileSystem fileSystem, bool useMachineCache = false) <NEWLINE> { <NEWLINE> var pathResolver = new DefaultPackagePathResolver(fileSystem, useSideBySidePaths: AllowMultipleVersions); <NEWLINE> var packageManager = new PackageManager(_repository, pathResolver, fileSystem, new LocalPackageRepository(pathResolver, fileSystem)); <NEWLINE> packageManager.Logger = Console; <NEWLINE>  <NEWLINE> return packageManager; <NEWLINE> } <NEWLINE> "
" <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE>  <NEWLINE> internal bool InstallPackage(PackageManager packageManager, IFileSystem fileSystem, string packageId, SemanticVersion version, Boolean allowPreReleaseVersion = true) <NEWLINE> { <NEWLINE> if (packageManager.IsPackageInstalled(packageId, version)) <NEWLINE> { <NEWLINE> return false; <NEWLINE> }"
"string CombineStrings(string[] items) <NEWLINE> { <NEWLINE>     string result = """"; <NEWLINE>     foreach (var item in items) <NEWLINE>     { <NEWLINE>         result += item; <NEWLINE>     } <NEWLINE>     return result; <NEWLINE> } <NEWLINE> "
"string result = """"; <NEWLINE> for (int i = 0; i < 10000; i++) <NEWLINE> { <NEWLINE>     result += i.ToString(); <NEWLINE> } <NEWLINE> "
"string message = string.Concat(""Name: "", name, "", Age: "", age, "", City: "", city); <NEWLINE> "
"string welcome = ""Hello "" + name + ""! Welcome to "" + location + "".""; <NEWLINE> "
"string CombineEvenNumbers(int[] numbers) <NEWLINE> { <NEWLINE>     string result = """"; <NEWLINE>     foreach (var num in numbers) <NEWLINE>     { <NEWLINE>         if (num % 2 == 0) <NEWLINE>             result += num + "", ""; <NEWLINE>     } <NEWLINE>     return result; <NEWLINE> } <NEWLINE> "
"public class ReportGenerator <NEWLINE> { <NEWLINE>     public string GetFormattedAddress(Customer customer) <NEWLINE>     { <NEWLINE>         return $""{customer.Street}, {customer.City}, {customer.ZipCode}""; <NEWLINE>     } <NEWLINE> }"
"public class LoanService <NEWLINE> { <NEWLINE>     public bool IsEligibleForLoan(Customer customer) <NEWLINE>     { <NEWLINE>         return customer.CreditScore > 700 && customer.AnnualIncome > 50000; <NEWLINE>     } <NEWLINE> } <NEWLINE> "
"public class AddressConverter <NEWLINE> { <NEWLINE>     public string GetAddress(Customer customer) <NEWLINE>     { <NEWLINE>         return $""{customer.Street}, {customer.City}, {customer.ZipCode}""; <NEWLINE>     } <NEWLINE> }"
"public class CardAnalyser <NEWLINE> { <NEWLINE>     private readonly _number; <NEWLINE>  <NEWLINE>     public CardAnalyser() <NEWLINE>     { <NEWLINE>          <NEWLINE>     } <NEWLINE>  <NEWLINE>     public bool IsCardExpired(Card card) <NEWLINE>     { <NEWLINE>         return card.ExpirationDate < DateTime.Now; <NEWLINE>     } <NEWLINE> }"
"public class BalanceControlService <NEWLINE> { <NEWLINE>     public decimal TotalBalance { get; set; } <NEWLINE>  <NEWLINE>     public decimal GetTotalBalance(Account account) <NEWLINE>     { <NEWLINE>         return account.BankBalance + account.CreditBalance; <NEWLINE>     } <NEWLINE> } <NEWLINE> "
"public class RegistrationService <NEWLINE> { <NEWLINE>     public string GetFullName(User user) <NEWLINE>     { <NEWLINE>         return $""{user.FirstName} {user.LastName}""; <NEWLINE>     } <NEWLINE> } <NEWLINE>  <NEWLINE> public class User <NEWLINE> { <NEWLINE>     public string FirstName { get; set; } <NEWLINE>     public string LastName { get; set; } <NEWLINE> }"
"public class DatabaseService <NEWLINE> { <NEWLINE>     public void ConfigureDatabase(string server, int port, string username, string password, string databaseName, bool useSSL) <NEWLINE>     { <NEWLINE>         Console.WriteLine($""Configuring database at {server}:{port} using SSL: {useSSL}""); <NEWLINE>         Console.WriteLine($""User: {username}, Database: {databaseName}""); <NEWLINE>     } <NEWLINE> } <NEWLINE>  <NEWLINE> var dbService = new DatabaseService(); <NEWLINE> dbService.ConfigureDatabase(""localhost"", 5432, ""admin"", ""password123"", ""MyDatabase"", true); <NEWLINE> "
"public class ReportService <NEWLINE> { <NEWLINE>     public void GenerateReport(string title, DateTime startDate, DateTime endDate, string author, bool includeCharts, string[] filters) <NEWLINE>     { <NEWLINE>         Console.WriteLine($""Generating report: {title} by {author}""); <NEWLINE>         Console.WriteLine($""From {startDate} to {endDate}""); <NEWLINE>         Console.WriteLine($""Include Charts: {includeCharts}, Filters: {string.Join("", "", filters)}""); <NEWLINE>     } <NEWLINE> } <NEWLINE> "
"public class AccountingService <NEWLINE> { <NEWLINE>     private readonly DatabaseContext _dbContext; <NEWLINE>  <NEWLINE>     public AccountingService(DatabaseContext dbContext) <NEWLINE>     { <NEWLINE>         _dbContext = dbContext; <NEWLINE>     } <NEWLINE>  <NEWLINE>     public void RecordTransaction( <NEWLINE>         string accountNumber, <NEWLINE>         DateTime transactionDate, <NEWLINE>         string description, <NEWLINE>         decimal debitAmount, <NEWLINE>         decimal creditAmount, <NEWLINE>         string currency, <NEWLINE>         string transactionType, <NEWLINE>         string costCenter) <NEWLINE>     { <NEWLINE>          <NEWLINE>         if (debitAmount < 0 || creditAmount < 0) <NEWLINE>             throw new ArgumentException(""Debit or Credit amounts cannot be negative.""); <NEWLINE>  <NEWLINE>          <NEWLINE>         var transaction = new FinancialTransaction <NEWLINE>         { <NEWLINE>             AccountNumber = accountNumber, <NEWLINE>             TransactionDate = transactionDate, <NEWLINE>             Description = description, <NEWLINE>             DebitAmount = debitAmount, <NEWLINE>             CreditAmount = creditAmount, <NEWLINE>             Currency = currency, <NEWLINE>             TransactionType = transactionType, <NEWLINE>             CostCenter = costCenter <NEWLINE>         }; <NEWLINE>  <NEWLINE>         _dbContext.FinancialTransactions.Add(transaction); <NEWLINE>         _dbContext.SaveChanges(); <NEWLINE>     } <NEWLINE> }"
"public Report GenerateReport( <NEWLINE>     DateTime startDate, <NEWLINE>     DateTime endDate, <NEWLINE>     string[] accountNumbers, <NEWLINE>     string reportType, <NEWLINE>     string currency, <NEWLINE>     string[] costCenters, <NEWLINE>     string[] projectCodes, <NEWLINE>     bool includeDetails, <NEWLINE>     bool includeTransactions, <NEWLINE>     string approverName, <NEWLINE>     bool isFinalVersion) <NEWLINE> { <NEWLINE>      <NEWLINE>     if (startDate >= endDate) <NEWLINE>         throw new ArgumentException(""Start date must be earlier than end date.""); <NEWLINE>     if (accountNumbers == null || accountNumbers.Length == 0) <NEWLINE>         throw new ArgumentException(""At least one account number must be provided.""); <NEWLINE>     if (string.IsNullOrWhiteSpace(reportType)) <NEWLINE>         throw new ArgumentException(""Report type is required.""); <NEWLINE>     if (string.IsNullOrWhiteSpace(currency)) <NEWLINE>         throw new ArgumentException(""Currency is required.""); <NEWLINE>     if (string.IsNullOrWhiteSpace(approverName)) <NEWLINE>         throw new ArgumentException(""Approver name is required.""); <NEWLINE>  <NEWLINE>      <NEWLINE>     var transactions = new List<string>(); <NEWLINE>     if (includeTransactions) <NEWLINE>     { <NEWLINE>         foreach (var account in accountNumbers) <NEWLINE>         { <NEWLINE>             transactions.Add($""Transaction for Account: {account}, Date: {DateTime.Now}, Amount: 1000 {currency}""); <NEWLINE>         } <NEWLINE>     } <NEWLINE>  <NEWLINE>      <NEWLINE>     var title = $""{reportType} Report - {startDate:yyyy-MM-dd} to {endDate:yyyy-MM-dd}""; <NEWLINE>  <NEWLINE>      <NEWLINE>     var status = isFinalVersion ? ""Approved"" : ""Draft""; <NEWLINE>  <NEWLINE>      <NEWLINE>     return new Report <NEWLINE>     { <NEWLINE>         Title = title, <NEWLINE>         StartDate = startDate, <NEWLINE>         EndDate = endDate, <NEWLINE>         Currency = currency, <NEWLINE>         GeneratedBy = approverName, <NEWLINE>         GeneratedOn = DateTime.Now, <NEWLINE>         Transactions = transactions, <NEWLINE>         Status = status, <NEWLINE>         IsFinalVersion = isFinalVersion <NEWLINE>     }; <NEWLINE> } <NEWLINE> "
